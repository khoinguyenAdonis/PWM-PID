
ACC_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005184  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005314  08005314  00015314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800537c  0800537c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800537c  0800537c  0001537c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005384  08005384  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005384  08005384  00015384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005388  08005388  00015388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800538c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000190  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000200  20000200  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000db8e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fff  00000000  00000000  0002dc2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d20  00000000  00000000  0002fc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c30  00000000  00000000  00030950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021a7c  00000000  00000000  00031580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010d4d  00000000  00000000  00052ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbaa1  00000000  00000000  00063d49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012f7ea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bf4  00000000  00000000  0012f83c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080052fc 	.word	0x080052fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080052fc 	.word	0x080052fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b10:	f000 b974 	b.w	8000dfc <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	468e      	mov	lr, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d14d      	bne.n	8000bd6 <__udivmoddi4+0xaa>
 8000b3a:	428a      	cmp	r2, r1
 8000b3c:	4694      	mov	ip, r2
 8000b3e:	d969      	bls.n	8000c14 <__udivmoddi4+0xe8>
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	b152      	cbz	r2, 8000b5c <__udivmoddi4+0x30>
 8000b46:	fa01 f302 	lsl.w	r3, r1, r2
 8000b4a:	f1c2 0120 	rsb	r1, r2, #32
 8000b4e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b52:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b56:	ea41 0e03 	orr.w	lr, r1, r3
 8000b5a:	4094      	lsls	r4, r2
 8000b5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b60:	0c21      	lsrs	r1, r4, #16
 8000b62:	fbbe f6f8 	udiv	r6, lr, r8
 8000b66:	fa1f f78c 	uxth.w	r7, ip
 8000b6a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b72:	fb06 f107 	mul.w	r1, r6, r7
 8000b76:	4299      	cmp	r1, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x64>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b82:	f080 811f 	bcs.w	8000dc4 <__udivmoddi4+0x298>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 811c 	bls.w	8000dc4 <__udivmoddi4+0x298>
 8000b8c:	3e02      	subs	r6, #2
 8000b8e:	4463      	add	r3, ip
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b98:	fb08 3310 	mls	r3, r8, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 f707 	mul.w	r7, r0, r7
 8000ba4:	42a7      	cmp	r7, r4
 8000ba6:	d90a      	bls.n	8000bbe <__udivmoddi4+0x92>
 8000ba8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bb0:	f080 810a 	bcs.w	8000dc8 <__udivmoddi4+0x29c>
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	f240 8107 	bls.w	8000dc8 <__udivmoddi4+0x29c>
 8000bba:	4464      	add	r4, ip
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc2:	1be4      	subs	r4, r4, r7
 8000bc4:	2600      	movs	r6, #0
 8000bc6:	b11d      	cbz	r5, 8000bd0 <__udivmoddi4+0xa4>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd0:	4631      	mov	r1, r6
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xc2>
 8000bda:	2d00      	cmp	r5, #0
 8000bdc:	f000 80ef 	beq.w	8000dbe <__udivmoddi4+0x292>
 8000be0:	2600      	movs	r6, #0
 8000be2:	e9c5 0100 	strd	r0, r1, [r5]
 8000be6:	4630      	mov	r0, r6
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f683 	clz	r6, r3
 8000bf2:	2e00      	cmp	r6, #0
 8000bf4:	d14a      	bne.n	8000c8c <__udivmoddi4+0x160>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd4>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80f9 	bhi.w	8000df2 <__udivmoddi4+0x2c6>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	469e      	mov	lr, r3
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa4>
 8000c0e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa4>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xec>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 8092 	bne.w	8000d46 <__udivmoddi4+0x21a>
 8000c22:	eba1 010c 	sub.w	r1, r1, ip
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f fe8c 	uxth.w	lr, ip
 8000c2e:	2601      	movs	r6, #1
 8000c30:	0c20      	lsrs	r0, r4, #16
 8000c32:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c36:	fb07 1113 	mls	r1, r7, r3, r1
 8000c3a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c3e:	fb0e f003 	mul.w	r0, lr, r3
 8000c42:	4288      	cmp	r0, r1
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x12c>
 8000c46:	eb1c 0101 	adds.w	r1, ip, r1
 8000c4a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x12a>
 8000c50:	4288      	cmp	r0, r1
 8000c52:	f200 80cb 	bhi.w	8000dec <__udivmoddi4+0x2c0>
 8000c56:	4643      	mov	r3, r8
 8000c58:	1a09      	subs	r1, r1, r0
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c60:	fb07 1110 	mls	r1, r7, r0, r1
 8000c64:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c68:	fb0e fe00 	mul.w	lr, lr, r0
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d908      	bls.n	8000c82 <__udivmoddi4+0x156>
 8000c70:	eb1c 0404 	adds.w	r4, ip, r4
 8000c74:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c78:	d202      	bcs.n	8000c80 <__udivmoddi4+0x154>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f200 80bb 	bhi.w	8000df6 <__udivmoddi4+0x2ca>
 8000c80:	4608      	mov	r0, r1
 8000c82:	eba4 040e 	sub.w	r4, r4, lr
 8000c86:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c8a:	e79c      	b.n	8000bc6 <__udivmoddi4+0x9a>
 8000c8c:	f1c6 0720 	rsb	r7, r6, #32
 8000c90:	40b3      	lsls	r3, r6
 8000c92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c9a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000ca2:	431c      	orrs	r4, r3
 8000ca4:	40f9      	lsrs	r1, r7
 8000ca6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000caa:	fa00 f306 	lsl.w	r3, r0, r6
 8000cae:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cb2:	0c20      	lsrs	r0, r4, #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cbc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cc4:	4288      	cmp	r0, r1
 8000cc6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cca:	d90b      	bls.n	8000ce4 <__udivmoddi4+0x1b8>
 8000ccc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000cd4:	f080 8088 	bcs.w	8000de8 <__udivmoddi4+0x2bc>
 8000cd8:	4288      	cmp	r0, r1
 8000cda:	f240 8085 	bls.w	8000de8 <__udivmoddi4+0x2bc>
 8000cde:	f1a8 0802 	sub.w	r8, r8, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1a09      	subs	r1, r1, r0
 8000ce6:	b2a4      	uxth	r4, r4
 8000ce8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cec:	fb09 1110 	mls	r1, r9, r0, r1
 8000cf0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cf4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cf8:	458e      	cmp	lr, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x1e2>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d04:	d26c      	bcs.n	8000de0 <__udivmoddi4+0x2b4>
 8000d06:	458e      	cmp	lr, r1
 8000d08:	d96a      	bls.n	8000de0 <__udivmoddi4+0x2b4>
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d12:	fba0 9402 	umull	r9, r4, r0, r2
 8000d16:	eba1 010e 	sub.w	r1, r1, lr
 8000d1a:	42a1      	cmp	r1, r4
 8000d1c:	46c8      	mov	r8, r9
 8000d1e:	46a6      	mov	lr, r4
 8000d20:	d356      	bcc.n	8000dd0 <__udivmoddi4+0x2a4>
 8000d22:	d053      	beq.n	8000dcc <__udivmoddi4+0x2a0>
 8000d24:	b15d      	cbz	r5, 8000d3e <__udivmoddi4+0x212>
 8000d26:	ebb3 0208 	subs.w	r2, r3, r8
 8000d2a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d2e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d32:	fa22 f306 	lsr.w	r3, r2, r6
 8000d36:	40f1      	lsrs	r1, r6
 8000d38:	431f      	orrs	r7, r3
 8000d3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d3e:	2600      	movs	r6, #0
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	f1c2 0320 	rsb	r3, r2, #32
 8000d4a:	40d8      	lsrs	r0, r3
 8000d4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d50:	fa21 f303 	lsr.w	r3, r1, r3
 8000d54:	4091      	lsls	r1, r2
 8000d56:	4301      	orrs	r1, r0
 8000d58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5c:	fa1f fe8c 	uxth.w	lr, ip
 8000d60:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d64:	fb07 3610 	mls	r6, r7, r0, r3
 8000d68:	0c0b      	lsrs	r3, r1, #16
 8000d6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d6e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d72:	429e      	cmp	r6, r3
 8000d74:	fa04 f402 	lsl.w	r4, r4, r2
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x260>
 8000d7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d82:	d22f      	bcs.n	8000de4 <__udivmoddi4+0x2b8>
 8000d84:	429e      	cmp	r6, r3
 8000d86:	d92d      	bls.n	8000de4 <__udivmoddi4+0x2b8>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	b289      	uxth	r1, r1
 8000d90:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d94:	fb07 3316 	mls	r3, r7, r6, r3
 8000d98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d9c:	fb06 f30e 	mul.w	r3, r6, lr
 8000da0:	428b      	cmp	r3, r1
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x28a>
 8000da4:	eb1c 0101 	adds.w	r1, ip, r1
 8000da8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000dac:	d216      	bcs.n	8000ddc <__udivmoddi4+0x2b0>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d914      	bls.n	8000ddc <__udivmoddi4+0x2b0>
 8000db2:	3e02      	subs	r6, #2
 8000db4:	4461      	add	r1, ip
 8000db6:	1ac9      	subs	r1, r1, r3
 8000db8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dbc:	e738      	b.n	8000c30 <__udivmoddi4+0x104>
 8000dbe:	462e      	mov	r6, r5
 8000dc0:	4628      	mov	r0, r5
 8000dc2:	e705      	b.n	8000bd0 <__udivmoddi4+0xa4>
 8000dc4:	4606      	mov	r6, r0
 8000dc6:	e6e3      	b.n	8000b90 <__udivmoddi4+0x64>
 8000dc8:	4618      	mov	r0, r3
 8000dca:	e6f8      	b.n	8000bbe <__udivmoddi4+0x92>
 8000dcc:	454b      	cmp	r3, r9
 8000dce:	d2a9      	bcs.n	8000d24 <__udivmoddi4+0x1f8>
 8000dd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dd4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dd8:	3801      	subs	r0, #1
 8000dda:	e7a3      	b.n	8000d24 <__udivmoddi4+0x1f8>
 8000ddc:	4646      	mov	r6, r8
 8000dde:	e7ea      	b.n	8000db6 <__udivmoddi4+0x28a>
 8000de0:	4620      	mov	r0, r4
 8000de2:	e794      	b.n	8000d0e <__udivmoddi4+0x1e2>
 8000de4:	4640      	mov	r0, r8
 8000de6:	e7d1      	b.n	8000d8c <__udivmoddi4+0x260>
 8000de8:	46d0      	mov	r8, sl
 8000dea:	e77b      	b.n	8000ce4 <__udivmoddi4+0x1b8>
 8000dec:	3b02      	subs	r3, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	e732      	b.n	8000c58 <__udivmoddi4+0x12c>
 8000df2:	4630      	mov	r0, r6
 8000df4:	e709      	b.n	8000c0a <__udivmoddi4+0xde>
 8000df6:	4464      	add	r4, ip
 8000df8:	3802      	subs	r0, #2
 8000dfa:	e742      	b.n	8000c82 <__udivmoddi4+0x156>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	4b44      	ldr	r3, [pc, #272]	; (8000f2c <MX_GPIO_Init+0x12c>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a43      	ldr	r2, [pc, #268]	; (8000f2c <MX_GPIO_Init+0x12c>)
 8000e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b41      	ldr	r3, [pc, #260]	; (8000f2c <MX_GPIO_Init+0x12c>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b3d      	ldr	r3, [pc, #244]	; (8000f2c <MX_GPIO_Init+0x12c>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a3c      	ldr	r2, [pc, #240]	; (8000f2c <MX_GPIO_Init+0x12c>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b3a      	ldr	r3, [pc, #232]	; (8000f2c <MX_GPIO_Init+0x12c>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	4b36      	ldr	r3, [pc, #216]	; (8000f2c <MX_GPIO_Init+0x12c>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a35      	ldr	r2, [pc, #212]	; (8000f2c <MX_GPIO_Init+0x12c>)
 8000e58:	f043 0304 	orr.w	r3, r3, #4
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b33      	ldr	r3, [pc, #204]	; (8000f2c <MX_GPIO_Init+0x12c>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0304 	and.w	r3, r3, #4
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	4b2f      	ldr	r3, [pc, #188]	; (8000f2c <MX_GPIO_Init+0x12c>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a2e      	ldr	r2, [pc, #184]	; (8000f2c <MX_GPIO_Init+0x12c>)
 8000e74:	f043 0310 	orr.w	r3, r3, #16
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b2c      	ldr	r3, [pc, #176]	; (8000f2c <MX_GPIO_Init+0x12c>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0310 	and.w	r3, r3, #16
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	4b28      	ldr	r3, [pc, #160]	; (8000f2c <MX_GPIO_Init+0x12c>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a27      	ldr	r2, [pc, #156]	; (8000f2c <MX_GPIO_Init+0x12c>)
 8000e90:	f043 0302 	orr.w	r3, r3, #2
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b25      	ldr	r3, [pc, #148]	; (8000f2c <MX_GPIO_Init+0x12c>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ea8:	4821      	ldr	r0, [pc, #132]	; (8000f30 <MX_GPIO_Init+0x130>)
 8000eaa:	f001 facd 	bl	8002448 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PC5 */
  GPIO_InitStruct.Pin = V_Set_Pin|GPIO_PIN_5;
 8000eae:	2330      	movs	r3, #48	; 0x30
 8000eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eb2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000eb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	481c      	ldr	r0, [pc, #112]	; (8000f34 <MX_GPIO_Init+0x134>)
 8000ec4:	f001 f924 	bl	8002110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ecc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4813      	ldr	r0, [pc, #76]	; (8000f30 <MX_GPIO_Init+0x130>)
 8000ee2:	f001 f915 	bl	8002110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_OFF_DC_Pin;
 8000ee6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ON_OFF_DC_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	480c      	ldr	r0, [pc, #48]	; (8000f30 <MX_GPIO_Init+0x130>)
 8000efe:	f001 f907 	bl	8002110 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 4, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2104      	movs	r1, #4
 8000f06:	200a      	movs	r0, #10
 8000f08:	f001 f8bd 	bl	8002086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000f0c:	200a      	movs	r0, #10
 8000f0e:	f001 f8d6 	bl	80020be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2102      	movs	r1, #2
 8000f16:	2017      	movs	r0, #23
 8000f18:	f001 f8b5 	bl	8002086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f1c:	2017      	movs	r0, #23
 8000f1e:	f001 f8ce 	bl	80020be <HAL_NVIC_EnableIRQ>

}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	; 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40020800 	.word	0x40020800

08000f38 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_5) // d_set+
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	2b20      	cmp	r3, #32
 8000f46:	d114      	bne.n	8000f72 <HAL_GPIO_EXTI_Callback+0x3a>
	{
		V_Set -= 50;
 8000f48:	4b2e      	ldr	r3, [pc, #184]	; (8001004 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	3b32      	subs	r3, #50	; 0x32
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	4b2c      	ldr	r3, [pc, #176]	; (8001004 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000f52:	701a      	strb	r2, [r3, #0]
		for(int x = 500000; x>0; x--);
 8000f54:	4b2c      	ldr	r3, [pc, #176]	; (8001008 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	e002      	b.n	8000f60 <HAL_GPIO_EXTI_Callback+0x28>
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	dcf9      	bgt.n	8000f5a <HAL_GPIO_EXTI_Callback+0x22>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 8000f66:	4b29      	ldr	r3, [pc, #164]	; (800100c <HAL_GPIO_EXTI_Callback+0xd4>)
 8000f68:	2220      	movs	r2, #32
 8000f6a:	615a      	str	r2, [r3, #20]
		HAL_NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 8000f6c:	2017      	movs	r0, #23
 8000f6e:	f001 f8c0 	bl	80020f2 <HAL_NVIC_ClearPendingIRQ>
		//if (D_Set > 10) D_Set = 0;
	}
	if(GPIO_Pin == V_Set_Pin) // v_set
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	2b10      	cmp	r3, #16
 8000f76:	d114      	bne.n	8000fa2 <HAL_GPIO_EXTI_Callback+0x6a>
	{
		V_Set += 5;
 8000f78:	4b22      	ldr	r3, [pc, #136]	; (8001004 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	3305      	adds	r3, #5
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	4b20      	ldr	r3, [pc, #128]	; (8001004 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000f82:	701a      	strb	r2, [r3, #0]
		for(int x = 500000; x>0; x--);
 8000f84:	4b20      	ldr	r3, [pc, #128]	; (8001008 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	e002      	b.n	8000f90 <HAL_GPIO_EXTI_Callback+0x58>
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	dcf9      	bgt.n	8000f8a <HAL_GPIO_EXTI_Callback+0x52>
		__HAL_GPIO_EXTI_CLEAR_IT(V_Set_Pin);
 8000f96:	4b1d      	ldr	r3, [pc, #116]	; (800100c <HAL_GPIO_EXTI_Callback+0xd4>)
 8000f98:	2210      	movs	r2, #16
 8000f9a:	615a      	str	r2, [r3, #20]
		HAL_NVIC_ClearPendingIRQ(EXTI4_IRQn);
 8000f9c:	200a      	movs	r0, #10
 8000f9e:	f001 f8a8 	bl	80020f2 <HAL_NVIC_ClearPendingIRQ>
	}
	if (GPIO_Pin == ON_OFF_DC_Pin) { // on_off dc
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fa8:	d127      	bne.n	8000ffa <HAL_GPIO_EXTI_Callback+0xc2>
		int on_off;
		if(on_off = 0)on_off = 1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d002      	beq.n	8000fba <HAL_GPIO_EXTI_Callback+0x82>
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	e001      	b.n	8000fbe <HAL_GPIO_EXTI_Callback+0x86>
		else on_off =0 ;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
		for(int x = 500000; x>0; x--);
 8000fbe:	4b12      	ldr	r3, [pc, #72]	; (8001008 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	e002      	b.n	8000fca <HAL_GPIO_EXTI_Callback+0x92>
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	dcf9      	bgt.n	8000fc4 <HAL_GPIO_EXTI_Callback+0x8c>
		__HAL_GPIO_EXTI_CLEAR_IT(ON_OFF_DC_Pin);
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	; (800100c <HAL_GPIO_EXTI_Callback+0xd4>)
 8000fd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fd6:	615a      	str	r2, [r3, #20]
		switch (on_off){
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d106      	bne.n	8000fec <HAL_GPIO_EXTI_Callback+0xb4>
			case 1 :
				SET_START_L298() ;
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe4:	480a      	ldr	r0, [pc, #40]	; (8001010 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000fe6:	f001 fa2f 	bl	8002448 <HAL_GPIO_WritePin>
				break;
 8000fea:	e007      	b.n	8000ffc <HAL_GPIO_EXTI_Callback+0xc4>
			default :
				OFF_DC_MOTOR();
 8000fec:	2200      	movs	r2, #0
 8000fee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ff2:	4807      	ldr	r0, [pc, #28]	; (8001010 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000ff4:	f001 fa28 	bl	8002448 <HAL_GPIO_WritePin>
				break;
 8000ff8:	e000      	b.n	8000ffc <HAL_GPIO_EXTI_Callback+0xc4>
		}


	}
 8000ffa:	bf00      	nop


}
 8000ffc:	bf00      	nop
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	2000008c 	.word	0x2000008c
 8001008:	0007a120 	.word	0x0007a120
 800100c:	40013c00 	.word	0x40013c00
 8001010:	40021000 	.word	0x40021000

08001014 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_I2C1_Init+0x50>)
 800101a:	4a13      	ldr	r2, [pc, #76]	; (8001068 <MX_I2C1_Init+0x54>)
 800101c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_I2C1_Init+0x50>)
 8001020:	4a12      	ldr	r2, [pc, #72]	; (800106c <MX_I2C1_Init+0x58>)
 8001022:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_I2C1_Init+0x50>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_I2C1_Init+0x50>)
 800102c:	2200      	movs	r2, #0
 800102e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <MX_I2C1_Init+0x50>)
 8001032:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001036:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <MX_I2C1_Init+0x50>)
 800103a:	2200      	movs	r2, #0
 800103c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <MX_I2C1_Init+0x50>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001044:	4b07      	ldr	r3, [pc, #28]	; (8001064 <MX_I2C1_Init+0x50>)
 8001046:	2200      	movs	r2, #0
 8001048:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <MX_I2C1_Init+0x50>)
 800104c:	2200      	movs	r2, #0
 800104e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001050:	4804      	ldr	r0, [pc, #16]	; (8001064 <MX_I2C1_Init+0x50>)
 8001052:	f001 fa2b 	bl	80024ac <HAL_I2C_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800105c:	f000 fa14 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000090 	.word	0x20000090
 8001068:	40005400 	.word	0x40005400
 800106c:	000186a0 	.word	0x000186a0

08001070 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a19      	ldr	r2, [pc, #100]	; (80010f4 <HAL_I2C_MspInit+0x84>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d12b      	bne.n	80010ea <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <HAL_I2C_MspInit+0x88>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a17      	ldr	r2, [pc, #92]	; (80010f8 <HAL_I2C_MspInit+0x88>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <HAL_I2C_MspInit+0x88>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010ae:	23c0      	movs	r3, #192	; 0xc0
 80010b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b2:	2312      	movs	r3, #18
 80010b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010be:	2304      	movs	r3, #4
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4619      	mov	r1, r3
 80010c8:	480c      	ldr	r0, [pc, #48]	; (80010fc <HAL_I2C_MspInit+0x8c>)
 80010ca:	f001 f821 	bl	8002110 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <HAL_I2C_MspInit+0x88>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	4a08      	ldr	r2, [pc, #32]	; (80010f8 <HAL_I2C_MspInit+0x88>)
 80010d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010dc:	6413      	str	r3, [r2, #64]	; 0x40
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_I2C_MspInit+0x88>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010ea:	bf00      	nop
 80010ec:	3728      	adds	r7, #40	; 0x28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40005400 	.word	0x40005400
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40020400 	.word	0x40020400

08001100 <lcd_send_cmd>:

#define SLAVE_ADDRESS_LCD 0x4E
// change this according to ur setup - DATASHEET

void lcd_send_cmd (char cmd)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af02      	add	r7, sp, #8
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f023 030f 	bic.w	r3, r3, #15
 8001110:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	011b      	lsls	r3, r3, #4
 8001116:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	f043 030c 	orr.w	r3, r3, #12
 800111e:	b2db      	uxtb	r3, r3
 8001120:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	f043 0308 	orr.w	r3, r3, #8
 8001128:	b2db      	uxtb	r3, r3
 800112a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800112c:	7bbb      	ldrb	r3, [r7, #14]
 800112e:	f043 030c 	orr.w	r3, r3, #12
 8001132:	b2db      	uxtb	r3, r3
 8001134:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001136:	7bbb      	ldrb	r3, [r7, #14]
 8001138:	f043 0308 	orr.w	r3, r3, #8
 800113c:	b2db      	uxtb	r3, r3
 800113e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001140:	f107 0208 	add.w	r2, r7, #8
 8001144:	2364      	movs	r3, #100	; 0x64
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2304      	movs	r3, #4
 800114a:	214e      	movs	r1, #78	; 0x4e
 800114c:	4803      	ldr	r0, [pc, #12]	; (800115c <lcd_send_cmd+0x5c>)
 800114e:	f001 faf1 	bl	8002734 <HAL_I2C_Master_Transmit>
}
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000090 	.word	0x20000090

08001160 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af02      	add	r7, sp, #8
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	f023 030f 	bic.w	r3, r3, #15
 8001170:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	011b      	lsls	r3, r3, #4
 8001176:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	f043 030d 	orr.w	r3, r3, #13
 800117e:	b2db      	uxtb	r3, r3
 8001180:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	f043 0309 	orr.w	r3, r3, #9
 8001188:	b2db      	uxtb	r3, r3
 800118a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800118c:	7bbb      	ldrb	r3, [r7, #14]
 800118e:	f043 030d 	orr.w	r3, r3, #13
 8001192:	b2db      	uxtb	r3, r3
 8001194:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001196:	7bbb      	ldrb	r3, [r7, #14]
 8001198:	f043 0309 	orr.w	r3, r3, #9
 800119c:	b2db      	uxtb	r3, r3
 800119e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80011a0:	f107 0208 	add.w	r2, r7, #8
 80011a4:	2364      	movs	r3, #100	; 0x64
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2304      	movs	r3, #4
 80011aa:	214e      	movs	r1, #78	; 0x4e
 80011ac:	4803      	ldr	r0, [pc, #12]	; (80011bc <lcd_send_data+0x5c>)
 80011ae:	f001 fac1 	bl	8002734 <HAL_I2C_Master_Transmit>
}
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000090 	.word	0x20000090

080011c0 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
    switch (row)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	d81f      	bhi.n	8001210 <lcd_put_cur+0x50>
 80011d0:	a201      	add	r2, pc, #4	; (adr r2, 80011d8 <lcd_put_cur+0x18>)
 80011d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d6:	bf00      	nop
 80011d8:	080011e9 	.word	0x080011e9
 80011dc:	080011f3 	.word	0x080011f3
 80011e0:	080011fd 	.word	0x080011fd
 80011e4:	08001207 	.word	0x08001207
    {
        case 0:
            col |= 0x80;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ee:	603b      	str	r3, [r7, #0]
            break;
 80011f0:	e00e      	b.n	8001210 <lcd_put_cur+0x50>
        case 1:
            col |= 0xC0;
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80011f8:	603b      	str	r3, [r7, #0]
            break;
 80011fa:	e009      	b.n	8001210 <lcd_put_cur+0x50>
        case 2:
            col |= 0x94;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	f043 0394 	orr.w	r3, r3, #148	; 0x94
 8001202:	603b      	str	r3, [r7, #0]
            break;
 8001204:	e004      	b.n	8001210 <lcd_put_cur+0x50>
        case 3:
            col |= 0xD4;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	f043 03d4 	orr.w	r3, r3, #212	; 0xd4
 800120c:	603b      	str	r3, [r7, #0]
            break;
 800120e:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	b2db      	uxtb	r3, r3
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff73 	bl	8001100 <lcd_send_cmd>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop

08001224 <lcd_init>:



void lcd_init (void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001228:	2032      	movs	r0, #50	; 0x32
 800122a:	f000 fe0f 	bl	8001e4c <HAL_Delay>
	lcd_send_cmd (0x30);
 800122e:	2030      	movs	r0, #48	; 0x30
 8001230:	f7ff ff66 	bl	8001100 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001234:	2005      	movs	r0, #5
 8001236:	f000 fe09 	bl	8001e4c <HAL_Delay>
	lcd_send_cmd (0x30);
 800123a:	2030      	movs	r0, #48	; 0x30
 800123c:	f7ff ff60 	bl	8001100 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001240:	2001      	movs	r0, #1
 8001242:	f000 fe03 	bl	8001e4c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001246:	2030      	movs	r0, #48	; 0x30
 8001248:	f7ff ff5a 	bl	8001100 <lcd_send_cmd>
	HAL_Delay(10);
 800124c:	200a      	movs	r0, #10
 800124e:	f000 fdfd 	bl	8001e4c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001252:	2020      	movs	r0, #32
 8001254:	f7ff ff54 	bl	8001100 <lcd_send_cmd>
	HAL_Delay(10);
 8001258:	200a      	movs	r0, #10
 800125a:	f000 fdf7 	bl	8001e4c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800125e:	2028      	movs	r0, #40	; 0x28
 8001260:	f7ff ff4e 	bl	8001100 <lcd_send_cmd>
	HAL_Delay(1);
 8001264:	2001      	movs	r0, #1
 8001266:	f000 fdf1 	bl	8001e4c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800126a:	2008      	movs	r0, #8
 800126c:	f7ff ff48 	bl	8001100 <lcd_send_cmd>
	HAL_Delay(1);
 8001270:	2001      	movs	r0, #1
 8001272:	f000 fdeb 	bl	8001e4c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001276:	2001      	movs	r0, #1
 8001278:	f7ff ff42 	bl	8001100 <lcd_send_cmd>
	HAL_Delay(1);
 800127c:	2001      	movs	r0, #1
 800127e:	f000 fde5 	bl	8001e4c <HAL_Delay>
	HAL_Delay(1);
 8001282:	2001      	movs	r0, #1
 8001284:	f000 fde2 	bl	8001e4c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001288:	2006      	movs	r0, #6
 800128a:	f7ff ff39 	bl	8001100 <lcd_send_cmd>
	HAL_Delay(1);
 800128e:	2001      	movs	r0, #1
 8001290:	f000 fddc 	bl	8001e4c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001294:	200c      	movs	r0, #12
 8001296:	f7ff ff33 	bl	8001100 <lcd_send_cmd>
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}

0800129e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80012a6:	e006      	b.n	80012b6 <lcd_send_string+0x18>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	1c5a      	adds	r2, r3, #1
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff55 	bl	8001160 <lcd_send_data>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f4      	bne.n	80012a8 <lcd_send_string+0xa>
}
 80012be:	bf00      	nop
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <display>:

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

	void display(float rpm,int speed){
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80012d2:	6038      	str	r0, [r7, #0]
		char Buffer[4] = {0};
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
		sprintf(Buffer[0],"RPM %d V/M ", rpm);
 80012d8:	7b3b      	ldrb	r3, [r7, #12]
 80012da:	461c      	mov	r4, r3
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff f92b 	bl	8000538 <__aeabi_f2d>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	490f      	ldr	r1, [pc, #60]	; (8001324 <display+0x5c>)
 80012e8:	4620      	mov	r0, r4
 80012ea:	f003 fb99 	bl	8004a20 <siprintf>
		sprintf(Buffer[1],"Speed %d KM/H", speed);
 80012ee:	7b7b      	ldrb	r3, [r7, #13]
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	490d      	ldr	r1, [pc, #52]	; (8001328 <display+0x60>)
 80012f4:	4618      	mov	r0, r3
 80012f6:	f003 fb93 	bl	8004a20 <siprintf>
		lcd_put_cur(0,0);
 80012fa:	2100      	movs	r1, #0
 80012fc:	2000      	movs	r0, #0
 80012fe:	f7ff ff5f 	bl	80011c0 <lcd_put_cur>
		lcd_send_string(Buffer[0]);
 8001302:	7b3b      	ldrb	r3, [r7, #12]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ffca 	bl	800129e <lcd_send_string>
		lcd_put_cur(1,0);
 800130a:	2100      	movs	r1, #0
 800130c:	2001      	movs	r0, #1
 800130e:	f7ff ff57 	bl	80011c0 <lcd_put_cur>
		lcd_send_string(Buffer[1]);
 8001312:	7b7b      	ldrb	r3, [r7, #13]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ffc2 	bl	800129e <lcd_send_string>
	}
 800131a:	bf00      	nop
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	bd90      	pop	{r4, r7, pc}
 8001322:	bf00      	nop
 8001324:	08005314 	.word	0x08005314
 8001328:	08005320 	.word	0x08005320

0800132c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001330:	f000 fd1a 	bl	8001d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001334:	f000 f83e 	bl	80013b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001338:	f7ff fd62 	bl	8000e00 <MX_GPIO_Init>
  MX_I2C1_Init();
 800133c:	f7ff fe6a 	bl	8001014 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001340:	f000 fa50 	bl	80017e4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001344:	f000 fad2 	bl	80018ec <MX_TIM2_Init>
  MX_TIM5_Init();
 8001348:	f000 fb24 	bl	8001994 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800134c:	2100      	movs	r1, #0
 800134e:	4813      	ldr	r0, [pc, #76]	; (800139c <main+0x70>)
 8001350:	f002 fa8c 	bl	800386c <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001354:	2104      	movs	r1, #4
 8001356:	4812      	ldr	r0, [pc, #72]	; (80013a0 <main+0x74>)
 8001358:	f002 fbf6 	bl	8003b48 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 800135c:	4811      	ldr	r0, [pc, #68]	; (80013a4 <main+0x78>)
 800135e:	f002 f9c5 	bl	80036ec <HAL_TIM_Base_Start_IT>
  lcd_init();
 8001362:	f7ff ff5f 	bl	8001224 <lcd_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  calculate_pid(V_Set, RPM);
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <main+0x7c>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	ee07 3a90 	vmov	s15, r3
 800136e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <main+0x80>)
 8001374:	ed93 7a00 	vldr	s14, [r3]
 8001378:	eef0 0a47 	vmov.f32	s1, s14
 800137c:	eeb0 0a67 	vmov.f32	s0, s15
 8001380:	f000 f8be 	bl	8001500 <calculate_pid>
	  display(RPM,Speed_km_h);
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <main+0x80>)
 8001386:	edd3 7a00 	vldr	s15, [r3]
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <main+0x84>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	eeb0 0a67 	vmov.f32	s0, s15
 8001394:	f7ff ff98 	bl	80012c8 <display>
	  calculate_pid(V_Set, RPM);
 8001398:	e7e5      	b.n	8001366 <main+0x3a>
 800139a:	bf00      	nop
 800139c:	20000110 	.word	0x20000110
 80013a0:	20000158 	.word	0x20000158
 80013a4:	200001a0 	.word	0x200001a0
 80013a8:	2000008c 	.word	0x2000008c
 80013ac:	20000108 	.word	0x20000108
 80013b0:	2000010c 	.word	0x2000010c

080013b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b094      	sub	sp, #80	; 0x50
 80013b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ba:	f107 0320 	add.w	r3, r7, #32
 80013be:	2230      	movs	r2, #48	; 0x30
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f003 fb24 	bl	8004a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d8:	2300      	movs	r3, #0
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	4b28      	ldr	r3, [pc, #160]	; (8001480 <SystemClock_Config+0xcc>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	4a27      	ldr	r2, [pc, #156]	; (8001480 <SystemClock_Config+0xcc>)
 80013e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e6:	6413      	str	r3, [r2, #64]	; 0x40
 80013e8:	4b25      	ldr	r3, [pc, #148]	; (8001480 <SystemClock_Config+0xcc>)
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f4:	2300      	movs	r3, #0
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	4b22      	ldr	r3, [pc, #136]	; (8001484 <SystemClock_Config+0xd0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a21      	ldr	r2, [pc, #132]	; (8001484 <SystemClock_Config+0xd0>)
 80013fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <SystemClock_Config+0xd0>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001410:	2301      	movs	r3, #1
 8001412:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001414:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800141a:	2302      	movs	r3, #2
 800141c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800141e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001422:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001424:	2304      	movs	r3, #4
 8001426:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001428:	2364      	movs	r3, #100	; 0x64
 800142a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800142c:	2302      	movs	r3, #2
 800142e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001430:	2304      	movs	r3, #4
 8001432:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001434:	f107 0320 	add.w	r3, r7, #32
 8001438:	4618      	mov	r0, r3
 800143a:	f001 fc83 	bl	8002d44 <HAL_RCC_OscConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001444:	f000 f820 	bl	8001488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001448:	230f      	movs	r3, #15
 800144a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800144c:	2302      	movs	r3, #2
 800144e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001454:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001458:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800145a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800145e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	2103      	movs	r1, #3
 8001466:	4618      	mov	r0, r3
 8001468:	f001 fee4 	bl	8003234 <HAL_RCC_ClockConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001472:	f000 f809 	bl	8001488 <Error_Handler>
  }
}
 8001476:	bf00      	nop
 8001478:	3750      	adds	r7, #80	; 0x50
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800
 8001484:	40007000 	.word	0x40007000

08001488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800148c:	b672      	cpsid	i
}
 800148e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001490:	e7fe      	b.n	8001490 <Error_Handler+0x8>
	...

08001494 <convert_pid_to_crr>:
float integral = 0, derivative = 0;
uint32_t crr_value,CRR_value;
float  pid_value = 0;
uint32_t a =0;
static uint32_t convert_pid_to_crr(float pid_value)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	ed87 0a01 	vstr	s0, [r7, #4]

    float max_pid_value = 1000.0;
 800149e:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <convert_pid_to_crr+0x5c>)
 80014a0:	60fb      	str	r3, [r7, #12]
  //  uint32_t max_crr_value = 999;

    crr_value = (uint32_t)(fabs (pid_value / max_pid_value * max_crr_value));
 80014a2:	edd7 6a01 	vldr	s13, [r7, #4]
 80014a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80014aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ae:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80014f4 <convert_pid_to_crr+0x60>
 80014b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b6:	eef0 7ae7 	vabs.f32	s15, s15
 80014ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014be:	ee17 2a90 	vmov	r2, s15
 80014c2:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <convert_pid_to_crr+0x64>)
 80014c4:	601a      	str	r2, [r3, #0]

    // Giới hạn giá trị CRR trong phạm vi cho phép
    if (crr_value > max_crr_value) {
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <convert_pid_to_crr+0x64>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 80014ce:	d906      	bls.n	80014de <convert_pid_to_crr+0x4a>
      return  crr_value = max_crr_value;
 80014d0:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <convert_pid_to_crr+0x64>)
 80014d2:	f44f 723e 	mov.w	r2, #760	; 0x2f8
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <convert_pid_to_crr+0x64>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	e001      	b.n	80014e2 <convert_pid_to_crr+0x4e>
    } else if (crr_value < 0) {
        return crr_value = 0;
    }else   return crr_value;
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <convert_pid_to_crr+0x64>)
 80014e0:	681b      	ldr	r3, [r3, #0]

}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	447a0000 	.word	0x447a0000
 80014f4:	443e0000 	.word	0x443e0000
 80014f8:	200000f4 	.word	0x200000f4
 80014fc:	00000000 	.word	0x00000000

08001500 <calculate_pid>:

void calculate_pid(float setpoint, float actual_value)
{
 8001500:	b5b0      	push	{r4, r5, r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	ed87 0a01 	vstr	s0, [r7, #4]
 800150a:	edc7 0a00 	vstr	s1, [r7]

    current_error = setpoint - actual_value;
 800150e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001512:	edd7 7a00 	vldr	s15, [r7]
 8001516:	ee77 7a67 	vsub.f32	s15, s14, s15
 800151a:	4b51      	ldr	r3, [pc, #324]	; (8001660 <calculate_pid+0x160>)
 800151c:	edc3 7a00 	vstr	s15, [r3]


    integral += current_error;
 8001520:	4b50      	ldr	r3, [pc, #320]	; (8001664 <calculate_pid+0x164>)
 8001522:	ed93 7a00 	vldr	s14, [r3]
 8001526:	4b4e      	ldr	r3, [pc, #312]	; (8001660 <calculate_pid+0x160>)
 8001528:	edd3 7a00 	vldr	s15, [r3]
 800152c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001530:	4b4c      	ldr	r3, [pc, #304]	; (8001664 <calculate_pid+0x164>)
 8001532:	edc3 7a00 	vstr	s15, [r3]


    derivative = current_error - previous_error;
 8001536:	4b4a      	ldr	r3, [pc, #296]	; (8001660 <calculate_pid+0x160>)
 8001538:	ed93 7a00 	vldr	s14, [r3]
 800153c:	4b4a      	ldr	r3, [pc, #296]	; (8001668 <calculate_pid+0x168>)
 800153e:	edd3 7a00 	vldr	s15, [r3]
 8001542:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001546:	4b49      	ldr	r3, [pc, #292]	; (800166c <calculate_pid+0x16c>)
 8001548:	edc3 7a00 	vstr	s15, [r3]


     pid_value = Kp*current_error + Ki*integral + Kd*derivative;
 800154c:	4b44      	ldr	r3, [pc, #272]	; (8001660 <calculate_pid+0x160>)
 800154e:	edd3 7a00 	vldr	s15, [r3]
 8001552:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001556:	ee67 7a87 	vmul.f32	s15, s15, s14
 800155a:	ee17 0a90 	vmov	r0, s15
 800155e:	f7fe ffeb 	bl	8000538 <__aeabi_f2d>
 8001562:	4604      	mov	r4, r0
 8001564:	460d      	mov	r5, r1
 8001566:	4b3f      	ldr	r3, [pc, #252]	; (8001664 <calculate_pid+0x164>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe ffe4 	bl	8000538 <__aeabi_f2d>
 8001570:	a339      	add	r3, pc, #228	; (adr r3, 8001658 <calculate_pid+0x158>)
 8001572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001576:	f7ff f837 	bl	80005e8 <__aeabi_dmul>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4620      	mov	r0, r4
 8001580:	4629      	mov	r1, r5
 8001582:	f7fe fe7b 	bl	800027c <__adddf3>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4614      	mov	r4, r2
 800158c:	461d      	mov	r5, r3
 800158e:	4b37      	ldr	r3, [pc, #220]	; (800166c <calculate_pid+0x16c>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001598:	ee17 0a90 	vmov	r0, s15
 800159c:	f7fe ffcc 	bl	8000538 <__aeabi_f2d>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4620      	mov	r0, r4
 80015a6:	4629      	mov	r1, r5
 80015a8:	f7fe fe68 	bl	800027c <__adddf3>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4610      	mov	r0, r2
 80015b2:	4619      	mov	r1, r3
 80015b4:	f7ff fa52 	bl	8000a5c <__aeabi_d2f>
 80015b8:	4603      	mov	r3, r0
 80015ba:	4a2d      	ldr	r2, [pc, #180]	; (8001670 <calculate_pid+0x170>)
 80015bc:	6013      	str	r3, [r2, #0]


    previous_error = current_error;
 80015be:	4b28      	ldr	r3, [pc, #160]	; (8001660 <calculate_pid+0x160>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a29      	ldr	r2, [pc, #164]	; (8001668 <calculate_pid+0x168>)
 80015c4:	6013      	str	r3, [r2, #0]


     CRR_value = convert_pid_to_crr( pid_value);
 80015c6:	4b2a      	ldr	r3, [pc, #168]	; (8001670 <calculate_pid+0x170>)
 80015c8:	edd3 7a00 	vldr	s15, [r3]
 80015cc:	eeb0 0a67 	vmov.f32	s0, s15
 80015d0:	f7ff ff60 	bl	8001494 <convert_pid_to_crr>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4a27      	ldr	r2, [pc, #156]	; (8001674 <calculate_pid+0x174>)
 80015d8:	6013      	str	r3, [r2, #0]
     if (current_error < 0 ) {
 80015da:	4b21      	ldr	r3, [pc, #132]	; (8001660 <calculate_pid+0x160>)
 80015dc:	edd3 7a00 	vldr	s15, [r3]
 80015e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e8:	d528      	bpl.n	800163c <calculate_pid+0x13c>
     	 if ( HAL_GetTick() - a <2000){
 80015ea:	f000 fc23 	bl	8001e34 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	4b21      	ldr	r3, [pc, #132]	; (8001678 <calculate_pid+0x178>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80015fa:	d209      	bcs.n	8001610 <calculate_pid+0x110>

              __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, CRR_value);
 80015fc:	4b1f      	ldr	r3, [pc, #124]	; (800167c <calculate_pid+0x17c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a1c      	ldr	r2, [pc, #112]	; (8001674 <calculate_pid+0x174>)
 8001602:	6812      	ldr	r2, [r2, #0]
 8001604:	639a      	str	r2, [r3, #56]	; 0x38
              __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001606:	4b1d      	ldr	r3, [pc, #116]	; (800167c <calculate_pid+0x17c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2200      	movs	r2, #0
 800160c:	635a      	str	r2, [r3, #52]	; 0x34
          } else {
              __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, CRR_value);
              __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
     }

}
 800160e:	e01e      	b.n	800164e <calculate_pid+0x14e>
     	 else{a =HAL_GetTick();
 8001610:	f000 fc10 	bl	8001e34 <HAL_GetTick>
 8001614:	4603      	mov	r3, r0
 8001616:	4a18      	ldr	r2, [pc, #96]	; (8001678 <calculate_pid+0x178>)
 8001618:	6013      	str	r3, [r2, #0]
     	 current_error = 0;
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <calculate_pid+0x160>)
 800161c:	f04f 0200 	mov.w	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
     	 integral = 0;
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <calculate_pid+0x164>)
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
     	 derivative = 0;
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <calculate_pid+0x16c>)
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
     	 previous_error = 0;}
 8001632:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <calculate_pid+0x168>)
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
}
 800163a:	e008      	b.n	800164e <calculate_pid+0x14e>
              __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, CRR_value);
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <calculate_pid+0x17c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a0c      	ldr	r2, [pc, #48]	; (8001674 <calculate_pid+0x174>)
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	635a      	str	r2, [r3, #52]	; 0x34
              __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001646:	4b0d      	ldr	r3, [pc, #52]	; (800167c <calculate_pid+0x17c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2200      	movs	r2, #0
 800164c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bdb0      	pop	{r4, r5, r7, pc}
 8001656:	bf00      	nop
 8001658:	eb1c432d 	.word	0xeb1c432d
 800165c:	3f1a36e2 	.word	0x3f1a36e2
 8001660:	200000e4 	.word	0x200000e4
 8001664:	200000ec 	.word	0x200000ec
 8001668:	200000e8 	.word	0x200000e8
 800166c:	200000f0 	.word	0x200000f0
 8001670:	200000fc 	.word	0x200000fc
 8001674:	200000f8 	.word	0x200000f8
 8001678:	20000100 	.word	0x20000100
 800167c:	20000110 	.word	0x20000110

08001680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <HAL_MspInit+0x4c>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	4a0f      	ldr	r2, [pc, #60]	; (80016cc <HAL_MspInit+0x4c>)
 8001690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001694:	6453      	str	r3, [r2, #68]	; 0x44
 8001696:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <HAL_MspInit+0x4c>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <HAL_MspInit+0x4c>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	4a08      	ldr	r2, [pc, #32]	; (80016cc <HAL_MspInit+0x4c>)
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b0:	6413      	str	r3, [r2, #64]	; 0x40
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_MspInit+0x4c>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800

080016d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <NMI_Handler+0x4>

080016d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016da:	e7fe      	b.n	80016da <HardFault_Handler+0x4>

080016dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <MemManage_Handler+0x4>

080016e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e6:	e7fe      	b.n	80016e6 <BusFault_Handler+0x4>

080016e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <UsageFault_Handler+0x4>

080016ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800171c:	f000 fb76 	bl	8001e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}

08001724 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(V_Set_Pin);
 8001728:	2010      	movs	r0, #16
 800172a:	f000 fea7 	bl	800247c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}

08001732 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001736:	2020      	movs	r0, #32
 8001738:	f000 fea0 	bl	800247c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}

08001740 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <TIM5_IRQHandler+0x10>)
 8001746:	f002 fa8d 	bl	8003c64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200001a0 	.word	0x200001a0

08001754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800175c:	4a14      	ldr	r2, [pc, #80]	; (80017b0 <_sbrk+0x5c>)
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <_sbrk+0x60>)
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <_sbrk+0x64>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d102      	bne.n	8001776 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <_sbrk+0x64>)
 8001772:	4a12      	ldr	r2, [pc, #72]	; (80017bc <_sbrk+0x68>)
 8001774:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	429a      	cmp	r2, r3
 8001782:	d207      	bcs.n	8001794 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001784:	f003 f91a 	bl	80049bc <__errno>
 8001788:	4603      	mov	r3, r0
 800178a:	220c      	movs	r2, #12
 800178c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800178e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001792:	e009      	b.n	80017a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <_sbrk+0x64>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179a:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <_sbrk+0x64>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	4a05      	ldr	r2, [pc, #20]	; (80017b8 <_sbrk+0x64>)
 80017a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20020000 	.word	0x20020000
 80017b4:	00000400 	.word	0x00000400
 80017b8:	20000104 	.word	0x20000104
 80017bc:	20000200 	.word	0x20000200

080017c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <SystemInit+0x20>)
 80017c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <SystemInit+0x20>)
 80017cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b092      	sub	sp, #72	; 0x48
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
 8001804:	615a      	str	r2, [r3, #20]
 8001806:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	2220      	movs	r2, #32
 800180c:	2100      	movs	r1, #0
 800180e:	4618      	mov	r0, r3
 8001810:	f003 f8fe 	bl	8004a10 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001814:	4b33      	ldr	r3, [pc, #204]	; (80018e4 <MX_TIM1_Init+0x100>)
 8001816:	4a34      	ldr	r2, [pc, #208]	; (80018e8 <MX_TIM1_Init+0x104>)
 8001818:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800181a:	4b32      	ldr	r3, [pc, #200]	; (80018e4 <MX_TIM1_Init+0x100>)
 800181c:	2200      	movs	r2, #0
 800181e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001820:	4b30      	ldr	r3, [pc, #192]	; (80018e4 <MX_TIM1_Init+0x100>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001826:	4b2f      	ldr	r3, [pc, #188]	; (80018e4 <MX_TIM1_Init+0x100>)
 8001828:	f240 32e7 	movw	r2, #999	; 0x3e7
 800182c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182e:	4b2d      	ldr	r3, [pc, #180]	; (80018e4 <MX_TIM1_Init+0x100>)
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001834:	4b2b      	ldr	r3, [pc, #172]	; (80018e4 <MX_TIM1_Init+0x100>)
 8001836:	2200      	movs	r2, #0
 8001838:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800183a:	4b2a      	ldr	r3, [pc, #168]	; (80018e4 <MX_TIM1_Init+0x100>)
 800183c:	2200      	movs	r2, #0
 800183e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001840:	4828      	ldr	r0, [pc, #160]	; (80018e4 <MX_TIM1_Init+0x100>)
 8001842:	f001 ffc3 	bl	80037cc <HAL_TIM_PWM_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800184c:	f7ff fe1c 	bl	8001488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001850:	2300      	movs	r3, #0
 8001852:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001854:	2300      	movs	r3, #0
 8001856:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001858:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800185c:	4619      	mov	r1, r3
 800185e:	4821      	ldr	r0, [pc, #132]	; (80018e4 <MX_TIM1_Init+0x100>)
 8001860:	f002 ffca 	bl	80047f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800186a:	f7ff fe0d 	bl	8001488 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800186e:	2360      	movs	r3, #96	; 0x60
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001876:	2300      	movs	r3, #0
 8001878:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800187a:	2300      	movs	r3, #0
 800187c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001882:	2300      	movs	r3, #0
 8001884:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001886:	2300      	movs	r3, #0
 8001888:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800188a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188e:	2200      	movs	r2, #0
 8001890:	4619      	mov	r1, r3
 8001892:	4814      	ldr	r0, [pc, #80]	; (80018e4 <MX_TIM1_Init+0x100>)
 8001894:	f002 faee 	bl	8003e74 <HAL_TIM_PWM_ConfigChannel>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800189e:	f7ff fdf3 	bl	8001488 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	4619      	mov	r1, r3
 80018c4:	4807      	ldr	r0, [pc, #28]	; (80018e4 <MX_TIM1_Init+0x100>)
 80018c6:	f003 f813 	bl	80048f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80018d0:	f7ff fdda 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018d4:	4803      	ldr	r0, [pc, #12]	; (80018e4 <MX_TIM1_Init+0x100>)
 80018d6:	f000 f93b 	bl	8001b50 <HAL_TIM_MspPostInit>

}
 80018da:	bf00      	nop
 80018dc:	3748      	adds	r7, #72	; 0x48
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000110 	.word	0x20000110
 80018e8:	40010000 	.word	0x40010000

080018ec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08c      	sub	sp, #48	; 0x30
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	2224      	movs	r2, #36	; 0x24
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f003 f888 	bl	8004a10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001908:	4b21      	ldr	r3, [pc, #132]	; (8001990 <MX_TIM2_Init+0xa4>)
 800190a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800190e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001910:	4b1f      	ldr	r3, [pc, #124]	; (8001990 <MX_TIM2_Init+0xa4>)
 8001912:	2200      	movs	r2, #0
 8001914:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001916:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <MX_TIM2_Init+0xa4>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800191c:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <MX_TIM2_Init+0xa4>)
 800191e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001922:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001924:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <MX_TIM2_Init+0xa4>)
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192a:	4b19      	ldr	r3, [pc, #100]	; (8001990 <MX_TIM2_Init+0xa4>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001930:	2303      	movs	r3, #3
 8001932:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001934:	2300      	movs	r3, #0
 8001936:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001938:	2301      	movs	r3, #1
 800193a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800193c:	2300      	movs	r3, #0
 800193e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001944:	2300      	movs	r3, #0
 8001946:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001948:	2301      	movs	r3, #1
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800194c:	2300      	movs	r3, #0
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001954:	f107 030c 	add.w	r3, r7, #12
 8001958:	4619      	mov	r1, r3
 800195a:	480d      	ldr	r0, [pc, #52]	; (8001990 <MX_TIM2_Init+0xa4>)
 800195c:	f002 f84e 	bl	80039fc <HAL_TIM_Encoder_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001966:	f7ff fd8f 	bl	8001488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	4619      	mov	r1, r3
 8001976:	4806      	ldr	r0, [pc, #24]	; (8001990 <MX_TIM2_Init+0xa4>)
 8001978:	f002 ff3e 	bl	80047f8 <HAL_TIMEx_MasterConfigSynchronization>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001982:	f7ff fd81 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001986:	bf00      	nop
 8001988:	3730      	adds	r7, #48	; 0x30
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000158 	.word	0x20000158

08001994 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800199a:	f107 0308 	add.w	r3, r7, #8
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a8:	463b      	mov	r3, r7
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80019b0:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <MX_TIM5_Init+0x94>)
 80019b2:	4a1e      	ldr	r2, [pc, #120]	; (8001a2c <MX_TIM5_Init+0x98>)
 80019b4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 50000-1;
 80019b6:	4b1c      	ldr	r3, [pc, #112]	; (8001a28 <MX_TIM5_Init+0x94>)
 80019b8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80019bc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019be:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <MX_TIM5_Init+0x94>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 80019c4:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <MX_TIM5_Init+0x94>)
 80019c6:	2263      	movs	r2, #99	; 0x63
 80019c8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ca:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <MX_TIM5_Init+0x94>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d0:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <MX_TIM5_Init+0x94>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80019d6:	4814      	ldr	r0, [pc, #80]	; (8001a28 <MX_TIM5_Init+0x94>)
 80019d8:	f001 fe38 	bl	800364c <HAL_TIM_Base_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80019e2:	f7ff fd51 	bl	8001488 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80019ec:	f107 0308 	add.w	r3, r7, #8
 80019f0:	4619      	mov	r1, r3
 80019f2:	480d      	ldr	r0, [pc, #52]	; (8001a28 <MX_TIM5_Init+0x94>)
 80019f4:	f002 fb00 	bl	8003ff8 <HAL_TIM_ConfigClockSource>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80019fe:	f7ff fd43 	bl	8001488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a02:	2300      	movs	r3, #0
 8001a04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a0a:	463b      	mov	r3, r7
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4806      	ldr	r0, [pc, #24]	; (8001a28 <MX_TIM5_Init+0x94>)
 8001a10:	f002 fef2 	bl	80047f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001a1a:	f7ff fd35 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	200001a0 	.word	0x200001a0
 8001a2c:	40000c00 	.word	0x40000c00

08001a30 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a0b      	ldr	r2, [pc, #44]	; (8001a6c <HAL_TIM_PWM_MspInit+0x3c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d10d      	bne.n	8001a5e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <HAL_TIM_PWM_MspInit+0x40>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	4a09      	ldr	r2, [pc, #36]	; (8001a70 <HAL_TIM_PWM_MspInit+0x40>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6453      	str	r3, [r2, #68]	; 0x44
 8001a52:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <HAL_TIM_PWM_MspInit+0x40>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001a5e:	bf00      	nop
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40010000 	.word	0x40010000
 8001a70:	40023800 	.word	0x40023800

08001a74 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	; 0x28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a94:	d12b      	bne.n	8001aee <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	4a16      	ldr	r2, [pc, #88]	; (8001af8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa6:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a0f      	ldr	r2, [pc, #60]	; (8001af8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2300      	movs	r3, #0
 8001adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae2:	f107 0314 	add.w	r3, r7, #20
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4804      	ldr	r0, [pc, #16]	; (8001afc <HAL_TIM_Encoder_MspInit+0x88>)
 8001aea:	f000 fb11 	bl	8002110 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001aee:	bf00      	nop
 8001af0:	3728      	adds	r7, #40	; 0x28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020000 	.word	0x40020000

08001b00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0e      	ldr	r2, [pc, #56]	; (8001b48 <HAL_TIM_Base_MspInit+0x48>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d115      	bne.n	8001b3e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <HAL_TIM_Base_MspInit+0x4c>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	4a0c      	ldr	r2, [pc, #48]	; (8001b4c <HAL_TIM_Base_MspInit+0x4c>)
 8001b1c:	f043 0308 	orr.w	r3, r3, #8
 8001b20:	6413      	str	r3, [r2, #64]	; 0x40
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <HAL_TIM_Base_MspInit+0x4c>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2100      	movs	r1, #0
 8001b32:	2032      	movs	r0, #50	; 0x32
 8001b34:	f000 faa7 	bl	8002086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001b38:	2032      	movs	r0, #50	; 0x32
 8001b3a:	f000 fac0 	bl	80020be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40000c00 	.word	0x40000c00
 8001b4c:	40023800 	.word	0x40023800

08001b50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 030c 	add.w	r3, r7, #12
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a12      	ldr	r2, [pc, #72]	; (8001bb8 <HAL_TIM_MspPostInit+0x68>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d11e      	bne.n	8001bb0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <HAL_TIM_MspPostInit+0x6c>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a10      	ldr	r2, [pc, #64]	; (8001bbc <HAL_TIM_MspPostInit+0x6c>)
 8001b7c:	f043 0310 	orr.w	r3, r3, #16
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <HAL_TIM_MspPostInit+0x6c>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0310 	and.w	r3, r3, #16
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = l298_Pin;
 8001b8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b94:	2302      	movs	r3, #2
 8001b96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(l298_GPIO_Port, &GPIO_InitStruct);
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <HAL_TIM_MspPostInit+0x70>)
 8001bac:	f000 fab0 	bl	8002110 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001bb0:	bf00      	nop
 8001bb2:	3720      	adds	r7, #32
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40010000 	.word	0x40010000
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	00000000 	.word	0x00000000

08001bc8 <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim5)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	static   uint32_t Last_Encoder = 0 ;
	volatile uint32_t Realtime_Encoder = __HAL_TIM_GET_COUNTER(&htim2);
 8001bd0:	4b49      	ldr	r3, [pc, #292]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd6:	60fb      	str	r3, [r7, #12]

	int32_t Delta_Encoder = Realtime_Encoder - Last_Encoder;
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	4b48      	ldr	r3, [pc, #288]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	61fb      	str	r3, [r7, #28]
	if (Delta_Encoder < -(0xffffffff / 2)) // Xử lý trư�?ng hợp quay ngược
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001be8:	d803      	bhi.n	8001bf2 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		Delta_Encoder += 0xffffffff;
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3b01      	subs	r3, #1
 8001bee:	61fb      	str	r3, [r7, #28]
 8001bf0:	e005      	b.n	8001bfe <HAL_TIM_PeriodElapsedCallback+0x36>
	}
	else if (Delta_Encoder > (0xffffffff / 2)) // Xử lý trư�?ng hợp quay xuôi
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	da02      	bge.n	8001bfe <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		Delta_Encoder -= 0xffffffff;
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	61fb      	str	r3, [r7, #28]
	}
	Last_Encoder = Realtime_Encoder;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	4a3e      	ldr	r2, [pc, #248]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001c02:	6013      	str	r3, [r2, #0]
	 RPM = fabs(Delta_Encoder / 1320.0 * 600);
 8001c04:	69f8      	ldr	r0, [r7, #28]
 8001c06:	f7fe fc85 	bl	8000514 <__aeabi_i2d>
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	4b3c      	ldr	r3, [pc, #240]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001c10:	f7fe fe14 	bl	800083c <__aeabi_ddiv>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	4b38      	ldr	r3, [pc, #224]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001c22:	f7fe fce1 	bl	80005e8 <__aeabi_dmul>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f7fe ff15 	bl	8000a5c <__aeabi_d2f>
 8001c32:	ee07 0a90 	vmov	s15, r0
 8001c36:	eef0 7ae7 	vabs.f32	s15, s15
 8001c3a:	4b33      	ldr	r3, [pc, #204]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001c3c:	edc3 7a00 	vstr	s15, [r3]
if (RPM<0.5) RPM = 0 ;
 8001c40:	4b31      	ldr	r3, [pc, #196]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001c42:	edd3 7a00 	vldr	s15, [r3]
 8001c46:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001c4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c52:	d503      	bpl.n	8001c5c <HAL_TIM_PeriodElapsedCallback+0x94>
 8001c54:	4b2c      	ldr	r3, [pc, #176]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
	float D = 65 / 1000.0;
 8001c5c:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001c5e:	61bb      	str	r3, [r7, #24]
	float Wheel_Circumference = 3.14159 * D;
 8001c60:	69b8      	ldr	r0, [r7, #24]
 8001c62:	f7fe fc69 	bl	8000538 <__aeabi_f2d>
 8001c66:	a31e      	add	r3, pc, #120	; (adr r3, 8001ce0 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6c:	f7fe fcbc 	bl	80005e8 <__aeabi_dmul>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4610      	mov	r0, r2
 8001c76:	4619      	mov	r1, r3
 8001c78:	f7fe fef0 	bl	8000a5c <__aeabi_d2f>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	617b      	str	r3, [r7, #20]
	float Speed_m_s = Wheel_Circumference * RPM / 6000.0;
 8001c80:	4b21      	ldr	r3, [pc, #132]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001c82:	ed93 7a00 	vldr	s14, [r3]
 8001c86:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c8e:	ee17 0a90 	vmov	r0, s15
 8001c92:	f7fe fc51 	bl	8000538 <__aeabi_f2d>
 8001c96:	a314      	add	r3, pc, #80	; (adr r3, 8001ce8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9c:	f7fe fdce 	bl	800083c <__aeabi_ddiv>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f7fe fed8 	bl	8000a5c <__aeabi_d2f>
 8001cac:	4603      	mov	r3, r0
 8001cae:	613b      	str	r3, [r7, #16]
		  Speed_km_h = Speed_m_s * 3.6;
 8001cb0:	6938      	ldr	r0, [r7, #16]
 8001cb2:	f7fe fc41 	bl	8000538 <__aeabi_f2d>
 8001cb6:	a30e      	add	r3, pc, #56	; (adr r3, 8001cf0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbc:	f7fe fc94 	bl	80005e8 <__aeabi_dmul>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f7fe fea0 	bl	8000a0c <__aeabi_d2iz>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	4a10      	ldr	r2, [pc, #64]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001cd0:	6013      	str	r3, [r2, #0]
}
 8001cd2:	bf00      	nop
 8001cd4:	3720      	adds	r7, #32
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	f3af 8000 	nop.w
 8001ce0:	f01b866e 	.word	0xf01b866e
 8001ce4:	400921f9 	.word	0x400921f9
 8001ce8:	00000000 	.word	0x00000000
 8001cec:	40b77000 	.word	0x40b77000
 8001cf0:	cccccccd 	.word	0xcccccccd
 8001cf4:	400ccccc 	.word	0x400ccccc
 8001cf8:	20000158 	.word	0x20000158
 8001cfc:	200001e8 	.word	0x200001e8
 8001d00:	4094a000 	.word	0x4094a000
 8001d04:	4082c000 	.word	0x4082c000
 8001d08:	20000108 	.word	0x20000108
 8001d0c:	3d851eb8 	.word	0x3d851eb8
 8001d10:	2000010c 	.word	0x2000010c

08001d14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d18:	480d      	ldr	r0, [pc, #52]	; (8001d50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d1a:	490e      	ldr	r1, [pc, #56]	; (8001d54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d1c:	4a0e      	ldr	r2, [pc, #56]	; (8001d58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d20:	e002      	b.n	8001d28 <LoopCopyDataInit>

08001d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d26:	3304      	adds	r3, #4

08001d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d2c:	d3f9      	bcc.n	8001d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d2e:	4a0b      	ldr	r2, [pc, #44]	; (8001d5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d30:	4c0b      	ldr	r4, [pc, #44]	; (8001d60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d34:	e001      	b.n	8001d3a <LoopFillZerobss>

08001d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d38:	3204      	adds	r2, #4

08001d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d3c:	d3fb      	bcc.n	8001d36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d3e:	f7ff fd3f 	bl	80017c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d42:	f002 fe41 	bl	80049c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d46:	f7ff faf1 	bl	800132c <main>
  bx  lr    
 8001d4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d54:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d58:	0800538c 	.word	0x0800538c
  ldr r2, =_sbss
 8001d5c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001d60:	20000200 	.word	0x20000200

08001d64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d64:	e7fe      	b.n	8001d64 <ADC_IRQHandler>
	...

08001d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d6c:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <HAL_Init+0x40>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a0d      	ldr	r2, [pc, #52]	; (8001da8 <HAL_Init+0x40>)
 8001d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_Init+0x40>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <HAL_Init+0x40>)
 8001d7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d84:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <HAL_Init+0x40>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a07      	ldr	r2, [pc, #28]	; (8001da8 <HAL_Init+0x40>)
 8001d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d90:	2003      	movs	r0, #3
 8001d92:	f000 f96d 	bl	8002070 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d96:	200f      	movs	r0, #15
 8001d98:	f000 f808 	bl	8001dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d9c:	f7ff fc70 	bl	8001680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40023c00 	.word	0x40023c00

08001dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <HAL_InitTick+0x54>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_InitTick+0x58>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f985 	bl	80020da <HAL_SYSTICK_Config>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e00e      	b.n	8001df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b0f      	cmp	r3, #15
 8001dde:	d80a      	bhi.n	8001df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de0:	2200      	movs	r2, #0
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001de8:	f000 f94d 	bl	8002086 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dec:	4a06      	ldr	r2, [pc, #24]	; (8001e08 <HAL_InitTick+0x5c>)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	e000      	b.n	8001df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000000 	.word	0x20000000
 8001e04:	20000008 	.word	0x20000008
 8001e08:	20000004 	.word	0x20000004

08001e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_IncTick+0x20>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_IncTick+0x24>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	4a04      	ldr	r2, [pc, #16]	; (8001e30 <HAL_IncTick+0x24>)
 8001e1e:	6013      	str	r3, [r2, #0]
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000008 	.word	0x20000008
 8001e30:	200001ec 	.word	0x200001ec

08001e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return uwTick;
 8001e38:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <HAL_GetTick+0x14>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	200001ec 	.word	0x200001ec

08001e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e54:	f7ff ffee 	bl	8001e34 <HAL_GetTick>
 8001e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e64:	d005      	beq.n	8001e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e66:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <HAL_Delay+0x44>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4413      	add	r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e72:	bf00      	nop
 8001e74:	f7ff ffde 	bl	8001e34 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d8f7      	bhi.n	8001e74 <HAL_Delay+0x28>
  {
  }
}
 8001e84:	bf00      	nop
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000008 	.word	0x20000008

08001e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ec6:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	60d3      	str	r3, [r2, #12]
}
 8001ecc:	bf00      	nop
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee0:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	f003 0307 	and.w	r3, r3, #7
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	db0b      	blt.n	8001f22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	f003 021f 	and.w	r2, r3, #31
 8001f10:	4907      	ldr	r1, [pc, #28]	; (8001f30 <__NVIC_EnableIRQ+0x38>)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	2001      	movs	r0, #1
 8001f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000e100 	.word	0xe000e100

08001f34 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	db0c      	blt.n	8001f60 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	f003 021f 	and.w	r2, r3, #31
 8001f4c:	4907      	ldr	r1, [pc, #28]	; (8001f6c <__NVIC_ClearPendingIRQ+0x38>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	2001      	movs	r0, #1
 8001f56:	fa00 f202 	lsl.w	r2, r0, r2
 8001f5a:	3360      	adds	r3, #96	; 0x60
 8001f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000e100 	.word	0xe000e100

08001f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	6039      	str	r1, [r7, #0]
 8001f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	db0a      	blt.n	8001f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	490c      	ldr	r1, [pc, #48]	; (8001fbc <__NVIC_SetPriority+0x4c>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	0112      	lsls	r2, r2, #4
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	440b      	add	r3, r1
 8001f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f98:	e00a      	b.n	8001fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4908      	ldr	r1, [pc, #32]	; (8001fc0 <__NVIC_SetPriority+0x50>)
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	3b04      	subs	r3, #4
 8001fa8:	0112      	lsls	r2, r2, #4
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	440b      	add	r3, r1
 8001fae:	761a      	strb	r2, [r3, #24]
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000e100 	.word	0xe000e100
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b089      	sub	sp, #36	; 0x24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f1c3 0307 	rsb	r3, r3, #7
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	bf28      	it	cs
 8001fe2:	2304      	movcs	r3, #4
 8001fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	2b06      	cmp	r3, #6
 8001fec:	d902      	bls.n	8001ff4 <NVIC_EncodePriority+0x30>
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3b03      	subs	r3, #3
 8001ff2:	e000      	b.n	8001ff6 <NVIC_EncodePriority+0x32>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43da      	mvns	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	401a      	ands	r2, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800200c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	fa01 f303 	lsl.w	r3, r1, r3
 8002016:	43d9      	mvns	r1, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800201c:	4313      	orrs	r3, r2
         );
}
 800201e:	4618      	mov	r0, r3
 8002020:	3724      	adds	r7, #36	; 0x24
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3b01      	subs	r3, #1
 8002038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800203c:	d301      	bcc.n	8002042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800203e:	2301      	movs	r3, #1
 8002040:	e00f      	b.n	8002062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002042:	4a0a      	ldr	r2, [pc, #40]	; (800206c <SysTick_Config+0x40>)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3b01      	subs	r3, #1
 8002048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800204a:	210f      	movs	r1, #15
 800204c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002050:	f7ff ff8e 	bl	8001f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002054:	4b05      	ldr	r3, [pc, #20]	; (800206c <SysTick_Config+0x40>)
 8002056:	2200      	movs	r2, #0
 8002058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800205a:	4b04      	ldr	r3, [pc, #16]	; (800206c <SysTick_Config+0x40>)
 800205c:	2207      	movs	r2, #7
 800205e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	e000e010 	.word	0xe000e010

08002070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff ff0b 	bl	8001e94 <__NVIC_SetPriorityGrouping>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002086:	b580      	push	{r7, lr}
 8002088:	b086      	sub	sp, #24
 800208a:	af00      	add	r7, sp, #0
 800208c:	4603      	mov	r3, r0
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002098:	f7ff ff20 	bl	8001edc <__NVIC_GetPriorityGrouping>
 800209c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	68b9      	ldr	r1, [r7, #8]
 80020a2:	6978      	ldr	r0, [r7, #20]
 80020a4:	f7ff ff8e 	bl	8001fc4 <NVIC_EncodePriority>
 80020a8:	4602      	mov	r2, r0
 80020aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ae:	4611      	mov	r1, r2
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff5d 	bl	8001f70 <__NVIC_SetPriority>
}
 80020b6:	bf00      	nop
 80020b8:	3718      	adds	r7, #24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	4603      	mov	r3, r0
 80020c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ff13 	bl	8001ef8 <__NVIC_EnableIRQ>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff ffa2 	bl	800202c <SysTick_Config>
 80020e8:	4603      	mov	r3, r0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	4603      	mov	r3, r0
 80020fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80020fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff17 	bl	8001f34 <__NVIC_ClearPendingIRQ>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002110:	b480      	push	{r7}
 8002112:	b089      	sub	sp, #36	; 0x24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800211e:	2300      	movs	r3, #0
 8002120:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	e16b      	b.n	8002404 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800212c:	2201      	movs	r2, #1
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	429a      	cmp	r2, r3
 8002146:	f040 815a 	bne.w	80023fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	2b01      	cmp	r3, #1
 8002154:	d005      	beq.n	8002162 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800215e:	2b02      	cmp	r3, #2
 8002160:	d130      	bne.n	80021c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	2203      	movs	r2, #3
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4013      	ands	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4313      	orrs	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002198:	2201      	movs	r2, #1
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 0201 	and.w	r2, r3, #1
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	d017      	beq.n	8002200 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	2203      	movs	r2, #3
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d123      	bne.n	8002254 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	08da      	lsrs	r2, r3, #3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3208      	adds	r2, #8
 8002214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002218:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	220f      	movs	r2, #15
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	08da      	lsrs	r2, r3, #3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3208      	adds	r2, #8
 800224e:	69b9      	ldr	r1, [r7, #24]
 8002250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	2203      	movs	r2, #3
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 0203 	and.w	r2, r3, #3
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 80b4 	beq.w	80023fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	4b60      	ldr	r3, [pc, #384]	; (800241c <HAL_GPIO_Init+0x30c>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	4a5f      	ldr	r2, [pc, #380]	; (800241c <HAL_GPIO_Init+0x30c>)
 80022a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022a4:	6453      	str	r3, [r2, #68]	; 0x44
 80022a6:	4b5d      	ldr	r3, [pc, #372]	; (800241c <HAL_GPIO_Init+0x30c>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022b2:	4a5b      	ldr	r2, [pc, #364]	; (8002420 <HAL_GPIO_Init+0x310>)
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	089b      	lsrs	r3, r3, #2
 80022b8:	3302      	adds	r3, #2
 80022ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	220f      	movs	r2, #15
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a52      	ldr	r2, [pc, #328]	; (8002424 <HAL_GPIO_Init+0x314>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d02b      	beq.n	8002336 <HAL_GPIO_Init+0x226>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a51      	ldr	r2, [pc, #324]	; (8002428 <HAL_GPIO_Init+0x318>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d025      	beq.n	8002332 <HAL_GPIO_Init+0x222>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a50      	ldr	r2, [pc, #320]	; (800242c <HAL_GPIO_Init+0x31c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d01f      	beq.n	800232e <HAL_GPIO_Init+0x21e>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a4f      	ldr	r2, [pc, #316]	; (8002430 <HAL_GPIO_Init+0x320>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d019      	beq.n	800232a <HAL_GPIO_Init+0x21a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a4e      	ldr	r2, [pc, #312]	; (8002434 <HAL_GPIO_Init+0x324>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d013      	beq.n	8002326 <HAL_GPIO_Init+0x216>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a4d      	ldr	r2, [pc, #308]	; (8002438 <HAL_GPIO_Init+0x328>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d00d      	beq.n	8002322 <HAL_GPIO_Init+0x212>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a4c      	ldr	r2, [pc, #304]	; (800243c <HAL_GPIO_Init+0x32c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d007      	beq.n	800231e <HAL_GPIO_Init+0x20e>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a4b      	ldr	r2, [pc, #300]	; (8002440 <HAL_GPIO_Init+0x330>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d101      	bne.n	800231a <HAL_GPIO_Init+0x20a>
 8002316:	2307      	movs	r3, #7
 8002318:	e00e      	b.n	8002338 <HAL_GPIO_Init+0x228>
 800231a:	2308      	movs	r3, #8
 800231c:	e00c      	b.n	8002338 <HAL_GPIO_Init+0x228>
 800231e:	2306      	movs	r3, #6
 8002320:	e00a      	b.n	8002338 <HAL_GPIO_Init+0x228>
 8002322:	2305      	movs	r3, #5
 8002324:	e008      	b.n	8002338 <HAL_GPIO_Init+0x228>
 8002326:	2304      	movs	r3, #4
 8002328:	e006      	b.n	8002338 <HAL_GPIO_Init+0x228>
 800232a:	2303      	movs	r3, #3
 800232c:	e004      	b.n	8002338 <HAL_GPIO_Init+0x228>
 800232e:	2302      	movs	r3, #2
 8002330:	e002      	b.n	8002338 <HAL_GPIO_Init+0x228>
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <HAL_GPIO_Init+0x228>
 8002336:	2300      	movs	r3, #0
 8002338:	69fa      	ldr	r2, [r7, #28]
 800233a:	f002 0203 	and.w	r2, r2, #3
 800233e:	0092      	lsls	r2, r2, #2
 8002340:	4093      	lsls	r3, r2
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002348:	4935      	ldr	r1, [pc, #212]	; (8002420 <HAL_GPIO_Init+0x310>)
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	089b      	lsrs	r3, r3, #2
 800234e:	3302      	adds	r3, #2
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002356:	4b3b      	ldr	r3, [pc, #236]	; (8002444 <HAL_GPIO_Init+0x334>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800237a:	4a32      	ldr	r2, [pc, #200]	; (8002444 <HAL_GPIO_Init+0x334>)
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002380:	4b30      	ldr	r3, [pc, #192]	; (8002444 <HAL_GPIO_Init+0x334>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023a4:	4a27      	ldr	r2, [pc, #156]	; (8002444 <HAL_GPIO_Init+0x334>)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023aa:	4b26      	ldr	r3, [pc, #152]	; (8002444 <HAL_GPIO_Init+0x334>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ce:	4a1d      	ldr	r2, [pc, #116]	; (8002444 <HAL_GPIO_Init+0x334>)
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023d4:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <HAL_GPIO_Init+0x334>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023f8:	4a12      	ldr	r2, [pc, #72]	; (8002444 <HAL_GPIO_Init+0x334>)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3301      	adds	r3, #1
 8002402:	61fb      	str	r3, [r7, #28]
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	2b0f      	cmp	r3, #15
 8002408:	f67f ae90 	bls.w	800212c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	3724      	adds	r7, #36	; 0x24
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800
 8002420:	40013800 	.word	0x40013800
 8002424:	40020000 	.word	0x40020000
 8002428:	40020400 	.word	0x40020400
 800242c:	40020800 	.word	0x40020800
 8002430:	40020c00 	.word	0x40020c00
 8002434:	40021000 	.word	0x40021000
 8002438:	40021400 	.word	0x40021400
 800243c:	40021800 	.word	0x40021800
 8002440:	40021c00 	.word	0x40021c00
 8002444:	40013c00 	.word	0x40013c00

08002448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	807b      	strh	r3, [r7, #2]
 8002454:	4613      	mov	r3, r2
 8002456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002458:	787b      	ldrb	r3, [r7, #1]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800245e:	887a      	ldrh	r2, [r7, #2]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002464:	e003      	b.n	800246e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002466:	887b      	ldrh	r3, [r7, #2]
 8002468:	041a      	lsls	r2, r3, #16
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	619a      	str	r2, [r3, #24]
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
	...

0800247c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002486:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002488:	695a      	ldr	r2, [r3, #20]
 800248a:	88fb      	ldrh	r3, [r7, #6]
 800248c:	4013      	ands	r3, r2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d006      	beq.n	80024a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002492:	4a05      	ldr	r2, [pc, #20]	; (80024a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002494:	88fb      	ldrh	r3, [r7, #6]
 8002496:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002498:	88fb      	ldrh	r3, [r7, #6]
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fd4c 	bl	8000f38 <HAL_GPIO_EXTI_Callback>
  }
}
 80024a0:	bf00      	nop
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40013c00 	.word	0x40013c00

080024ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e12b      	b.n	8002716 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fe fdcc 	bl	8001070 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2224      	movs	r2, #36	; 0x24
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0201 	bic.w	r2, r2, #1
 80024ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800250e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002510:	f001 f888 	bl	8003624 <HAL_RCC_GetPCLK1Freq>
 8002514:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	4a81      	ldr	r2, [pc, #516]	; (8002720 <HAL_I2C_Init+0x274>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d807      	bhi.n	8002530 <HAL_I2C_Init+0x84>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4a80      	ldr	r2, [pc, #512]	; (8002724 <HAL_I2C_Init+0x278>)
 8002524:	4293      	cmp	r3, r2
 8002526:	bf94      	ite	ls
 8002528:	2301      	movls	r3, #1
 800252a:	2300      	movhi	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	e006      	b.n	800253e <HAL_I2C_Init+0x92>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4a7d      	ldr	r2, [pc, #500]	; (8002728 <HAL_I2C_Init+0x27c>)
 8002534:	4293      	cmp	r3, r2
 8002536:	bf94      	ite	ls
 8002538:	2301      	movls	r3, #1
 800253a:	2300      	movhi	r3, #0
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e0e7      	b.n	8002716 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4a78      	ldr	r2, [pc, #480]	; (800272c <HAL_I2C_Init+0x280>)
 800254a:	fba2 2303 	umull	r2, r3, r2, r3
 800254e:	0c9b      	lsrs	r3, r3, #18
 8002550:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	430a      	orrs	r2, r1
 8002564:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	4a6a      	ldr	r2, [pc, #424]	; (8002720 <HAL_I2C_Init+0x274>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d802      	bhi.n	8002580 <HAL_I2C_Init+0xd4>
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	3301      	adds	r3, #1
 800257e:	e009      	b.n	8002594 <HAL_I2C_Init+0xe8>
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002586:	fb02 f303 	mul.w	r3, r2, r3
 800258a:	4a69      	ldr	r2, [pc, #420]	; (8002730 <HAL_I2C_Init+0x284>)
 800258c:	fba2 2303 	umull	r2, r3, r2, r3
 8002590:	099b      	lsrs	r3, r3, #6
 8002592:	3301      	adds	r3, #1
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	430b      	orrs	r3, r1
 800259a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	495c      	ldr	r1, [pc, #368]	; (8002720 <HAL_I2C_Init+0x274>)
 80025b0:	428b      	cmp	r3, r1
 80025b2:	d819      	bhi.n	80025e8 <HAL_I2C_Init+0x13c>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	1e59      	subs	r1, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	fbb1 f3f3 	udiv	r3, r1, r3
 80025c2:	1c59      	adds	r1, r3, #1
 80025c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025c8:	400b      	ands	r3, r1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00a      	beq.n	80025e4 <HAL_I2C_Init+0x138>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	1e59      	subs	r1, r3, #1
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80025dc:	3301      	adds	r3, #1
 80025de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e2:	e051      	b.n	8002688 <HAL_I2C_Init+0x1dc>
 80025e4:	2304      	movs	r3, #4
 80025e6:	e04f      	b.n	8002688 <HAL_I2C_Init+0x1dc>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d111      	bne.n	8002614 <HAL_I2C_Init+0x168>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	1e58      	subs	r0, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6859      	ldr	r1, [r3, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	440b      	add	r3, r1
 80025fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002602:	3301      	adds	r3, #1
 8002604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002608:	2b00      	cmp	r3, #0
 800260a:	bf0c      	ite	eq
 800260c:	2301      	moveq	r3, #1
 800260e:	2300      	movne	r3, #0
 8002610:	b2db      	uxtb	r3, r3
 8002612:	e012      	b.n	800263a <HAL_I2C_Init+0x18e>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	1e58      	subs	r0, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6859      	ldr	r1, [r3, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	0099      	lsls	r1, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	fbb0 f3f3 	udiv	r3, r0, r3
 800262a:	3301      	adds	r3, #1
 800262c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002630:	2b00      	cmp	r3, #0
 8002632:	bf0c      	ite	eq
 8002634:	2301      	moveq	r3, #1
 8002636:	2300      	movne	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_I2C_Init+0x196>
 800263e:	2301      	movs	r3, #1
 8002640:	e022      	b.n	8002688 <HAL_I2C_Init+0x1dc>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10e      	bne.n	8002668 <HAL_I2C_Init+0x1bc>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	1e58      	subs	r0, r3, #1
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6859      	ldr	r1, [r3, #4]
 8002652:	460b      	mov	r3, r1
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	440b      	add	r3, r1
 8002658:	fbb0 f3f3 	udiv	r3, r0, r3
 800265c:	3301      	adds	r3, #1
 800265e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002666:	e00f      	b.n	8002688 <HAL_I2C_Init+0x1dc>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	1e58      	subs	r0, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6859      	ldr	r1, [r3, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	0099      	lsls	r1, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	fbb0 f3f3 	udiv	r3, r0, r3
 800267e:	3301      	adds	r3, #1
 8002680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002684:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	6809      	ldr	r1, [r1, #0]
 800268c:	4313      	orrs	r3, r2
 800268e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69da      	ldr	r2, [r3, #28]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6911      	ldr	r1, [r2, #16]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	68d2      	ldr	r2, [r2, #12]
 80026c2:	4311      	orrs	r1, r2
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6812      	ldr	r2, [r2, #0]
 80026c8:	430b      	orrs	r3, r1
 80026ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695a      	ldr	r2, [r3, #20]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 0201 	orr.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2220      	movs	r2, #32
 8002702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	000186a0 	.word	0x000186a0
 8002724:	001e847f 	.word	0x001e847f
 8002728:	003d08ff 	.word	0x003d08ff
 800272c:	431bde83 	.word	0x431bde83
 8002730:	10624dd3 	.word	0x10624dd3

08002734 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af02      	add	r7, sp, #8
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	607a      	str	r2, [r7, #4]
 800273e:	461a      	mov	r2, r3
 8002740:	460b      	mov	r3, r1
 8002742:	817b      	strh	r3, [r7, #10]
 8002744:	4613      	mov	r3, r2
 8002746:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002748:	f7ff fb74 	bl	8001e34 <HAL_GetTick>
 800274c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b20      	cmp	r3, #32
 8002758:	f040 80e0 	bne.w	800291c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	2319      	movs	r3, #25
 8002762:	2201      	movs	r2, #1
 8002764:	4970      	ldr	r1, [pc, #448]	; (8002928 <HAL_I2C_Master_Transmit+0x1f4>)
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 f964 	bl	8002a34 <I2C_WaitOnFlagUntilTimeout>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002772:	2302      	movs	r3, #2
 8002774:	e0d3      	b.n	800291e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_I2C_Master_Transmit+0x50>
 8002780:	2302      	movs	r3, #2
 8002782:	e0cc      	b.n	800291e <HAL_I2C_Master_Transmit+0x1ea>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b01      	cmp	r3, #1
 8002798:	d007      	beq.n	80027aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f042 0201 	orr.w	r2, r2, #1
 80027a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2221      	movs	r2, #33	; 0x21
 80027be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2210      	movs	r2, #16
 80027c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	893a      	ldrh	r2, [r7, #8]
 80027da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4a50      	ldr	r2, [pc, #320]	; (800292c <HAL_I2C_Master_Transmit+0x1f8>)
 80027ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027ec:	8979      	ldrh	r1, [r7, #10]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	6a3a      	ldr	r2, [r7, #32]
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 f89c 	bl	8002930 <I2C_MasterRequestWrite>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e08d      	b.n	800291e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002818:	e066      	b.n	80028e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	6a39      	ldr	r1, [r7, #32]
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 f9de 	bl	8002be0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00d      	beq.n	8002846 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	2b04      	cmp	r3, #4
 8002830:	d107      	bne.n	8002842 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002840:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e06b      	b.n	800291e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	781a      	ldrb	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	1c5a      	adds	r2, r3, #1
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002860:	b29b      	uxth	r3, r3
 8002862:	3b01      	subs	r3, #1
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b04      	cmp	r3, #4
 8002882:	d11b      	bne.n	80028bc <HAL_I2C_Master_Transmit+0x188>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002888:	2b00      	cmp	r3, #0
 800288a:	d017      	beq.n	80028bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	781a      	ldrb	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	6a39      	ldr	r1, [r7, #32]
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 f9ce 	bl	8002c62 <I2C_WaitOnBTFFlagUntilTimeout>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00d      	beq.n	80028e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d107      	bne.n	80028e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e01a      	b.n	800291e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d194      	bne.n	800281a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2220      	movs	r2, #32
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	e000      	b.n	800291e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800291c:	2302      	movs	r3, #2
  }
}
 800291e:	4618      	mov	r0, r3
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	00100002 	.word	0x00100002
 800292c:	ffff0000 	.word	0xffff0000

08002930 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af02      	add	r7, sp, #8
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	607a      	str	r2, [r7, #4]
 800293a:	603b      	str	r3, [r7, #0]
 800293c:	460b      	mov	r3, r1
 800293e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b08      	cmp	r3, #8
 800294a:	d006      	beq.n	800295a <I2C_MasterRequestWrite+0x2a>
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d003      	beq.n	800295a <I2C_MasterRequestWrite+0x2a>
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002958:	d108      	bne.n	800296c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	e00b      	b.n	8002984 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	2b12      	cmp	r3, #18
 8002972:	d107      	bne.n	8002984 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002982:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 f84f 	bl	8002a34 <I2C_WaitOnFlagUntilTimeout>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00d      	beq.n	80029b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029aa:	d103      	bne.n	80029b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e035      	b.n	8002a24 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029c0:	d108      	bne.n	80029d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029c2:	897b      	ldrh	r3, [r7, #10]
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029d0:	611a      	str	r2, [r3, #16]
 80029d2:	e01b      	b.n	8002a0c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029d4:	897b      	ldrh	r3, [r7, #10]
 80029d6:	11db      	asrs	r3, r3, #7
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	f003 0306 	and.w	r3, r3, #6
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	f063 030f 	orn	r3, r3, #15
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	490e      	ldr	r1, [pc, #56]	; (8002a2c <I2C_MasterRequestWrite+0xfc>)
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 f875 	bl	8002ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e010      	b.n	8002a24 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a02:	897b      	ldrh	r3, [r7, #10]
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	4907      	ldr	r1, [pc, #28]	; (8002a30 <I2C_MasterRequestWrite+0x100>)
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 f865 	bl	8002ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	00010008 	.word	0x00010008
 8002a30:	00010002 	.word	0x00010002

08002a34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	4613      	mov	r3, r2
 8002a42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a44:	e025      	b.n	8002a92 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a4c:	d021      	beq.n	8002a92 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a4e:	f7ff f9f1 	bl	8001e34 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d302      	bcc.n	8002a64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d116      	bne.n	8002a92 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f043 0220 	orr.w	r2, r3, #32
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e023      	b.n	8002ada <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	0c1b      	lsrs	r3, r3, #16
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d10d      	bne.n	8002ab8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	43da      	mvns	r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	bf0c      	ite	eq
 8002aae:	2301      	moveq	r3, #1
 8002ab0:	2300      	movne	r3, #0
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	e00c      	b.n	8002ad2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	43da      	mvns	r2, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	bf0c      	ite	eq
 8002aca:	2301      	moveq	r3, #1
 8002acc:	2300      	movne	r3, #0
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d0b6      	beq.n	8002a46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b084      	sub	sp, #16
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002af0:	e051      	b.n	8002b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b00:	d123      	bne.n	8002b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b10:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b1a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f043 0204 	orr.w	r2, r3, #4
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e046      	b.n	8002bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b50:	d021      	beq.n	8002b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b52:	f7ff f96f 	bl	8001e34 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d302      	bcc.n	8002b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d116      	bne.n	8002b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2220      	movs	r2, #32
 8002b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f043 0220 	orr.w	r2, r3, #32
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e020      	b.n	8002bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	0c1b      	lsrs	r3, r3, #16
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d10c      	bne.n	8002bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	43da      	mvns	r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	4013      	ands	r3, r2
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	bf14      	ite	ne
 8002bb2:	2301      	movne	r3, #1
 8002bb4:	2300      	moveq	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	e00b      	b.n	8002bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	43da      	mvns	r2, r3
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	bf14      	ite	ne
 8002bcc:	2301      	movne	r3, #1
 8002bce:	2300      	moveq	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d18d      	bne.n	8002af2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bec:	e02d      	b.n	8002c4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 f878 	bl	8002ce4 <I2C_IsAcknowledgeFailed>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e02d      	b.n	8002c5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c04:	d021      	beq.n	8002c4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c06:	f7ff f915 	bl	8001e34 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d302      	bcc.n	8002c1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d116      	bne.n	8002c4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2220      	movs	r2, #32
 8002c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f043 0220 	orr.w	r2, r3, #32
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e007      	b.n	8002c5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c54:	2b80      	cmp	r3, #128	; 0x80
 8002c56:	d1ca      	bne.n	8002bee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b084      	sub	sp, #16
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c6e:	e02d      	b.n	8002ccc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 f837 	bl	8002ce4 <I2C_IsAcknowledgeFailed>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e02d      	b.n	8002cdc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c86:	d021      	beq.n	8002ccc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c88:	f7ff f8d4 	bl	8001e34 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d302      	bcc.n	8002c9e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d116      	bne.n	8002ccc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	f043 0220 	orr.w	r2, r3, #32
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e007      	b.n	8002cdc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d1ca      	bne.n	8002c70 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cfa:	d11b      	bne.n	8002d34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	f043 0204 	orr.w	r2, r3, #4
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e000      	b.n	8002d36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
	...

08002d44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e267      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d075      	beq.n	8002e4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d62:	4b88      	ldr	r3, [pc, #544]	; (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 030c 	and.w	r3, r3, #12
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d00c      	beq.n	8002d88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d6e:	4b85      	ldr	r3, [pc, #532]	; (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d112      	bne.n	8002da0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d7a:	4b82      	ldr	r3, [pc, #520]	; (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d86:	d10b      	bne.n	8002da0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d88:	4b7e      	ldr	r3, [pc, #504]	; (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d05b      	beq.n	8002e4c <HAL_RCC_OscConfig+0x108>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d157      	bne.n	8002e4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e242      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da8:	d106      	bne.n	8002db8 <HAL_RCC_OscConfig+0x74>
 8002daa:	4b76      	ldr	r3, [pc, #472]	; (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a75      	ldr	r2, [pc, #468]	; (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	e01d      	b.n	8002df4 <HAL_RCC_OscConfig+0xb0>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dc0:	d10c      	bne.n	8002ddc <HAL_RCC_OscConfig+0x98>
 8002dc2:	4b70      	ldr	r3, [pc, #448]	; (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a6f      	ldr	r2, [pc, #444]	; (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	4b6d      	ldr	r3, [pc, #436]	; (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a6c      	ldr	r2, [pc, #432]	; (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	e00b      	b.n	8002df4 <HAL_RCC_OscConfig+0xb0>
 8002ddc:	4b69      	ldr	r3, [pc, #420]	; (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a68      	ldr	r2, [pc, #416]	; (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	4b66      	ldr	r3, [pc, #408]	; (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a65      	ldr	r2, [pc, #404]	; (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d013      	beq.n	8002e24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfc:	f7ff f81a 	bl	8001e34 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e04:	f7ff f816 	bl	8001e34 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b64      	cmp	r3, #100	; 0x64
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e207      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e16:	4b5b      	ldr	r3, [pc, #364]	; (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0xc0>
 8002e22:	e014      	b.n	8002e4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7ff f806 	bl	8001e34 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e2c:	f7ff f802 	bl	8001e34 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b64      	cmp	r3, #100	; 0x64
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e1f3      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e3e:	4b51      	ldr	r3, [pc, #324]	; (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0xe8>
 8002e4a:	e000      	b.n	8002e4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d063      	beq.n	8002f22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e5a:	4b4a      	ldr	r3, [pc, #296]	; (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00b      	beq.n	8002e7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e66:	4b47      	ldr	r3, [pc, #284]	; (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d11c      	bne.n	8002eac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e72:	4b44      	ldr	r3, [pc, #272]	; (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d116      	bne.n	8002eac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e7e:	4b41      	ldr	r3, [pc, #260]	; (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <HAL_RCC_OscConfig+0x152>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d001      	beq.n	8002e96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e1c7      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e96:	4b3b      	ldr	r3, [pc, #236]	; (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4937      	ldr	r1, [pc, #220]	; (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eaa:	e03a      	b.n	8002f22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d020      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eb4:	4b34      	ldr	r3, [pc, #208]	; (8002f88 <HAL_RCC_OscConfig+0x244>)
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eba:	f7fe ffbb 	bl	8001e34 <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ec2:	f7fe ffb7 	bl	8001e34 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e1a8      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed4:	4b2b      	ldr	r3, [pc, #172]	; (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0f0      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee0:	4b28      	ldr	r3, [pc, #160]	; (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4925      	ldr	r1, [pc, #148]	; (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	600b      	str	r3, [r1, #0]
 8002ef4:	e015      	b.n	8002f22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ef6:	4b24      	ldr	r3, [pc, #144]	; (8002f88 <HAL_RCC_OscConfig+0x244>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efc:	f7fe ff9a 	bl	8001e34 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f04:	f7fe ff96 	bl	8001e34 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e187      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f16:	4b1b      	ldr	r3, [pc, #108]	; (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d036      	beq.n	8002f9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d016      	beq.n	8002f64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f36:	4b15      	ldr	r3, [pc, #84]	; (8002f8c <HAL_RCC_OscConfig+0x248>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3c:	f7fe ff7a 	bl	8001e34 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f44:	f7fe ff76 	bl	8001e34 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e167      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f56:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0x200>
 8002f62:	e01b      	b.n	8002f9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f64:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <HAL_RCC_OscConfig+0x248>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6a:	f7fe ff63 	bl	8001e34 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f70:	e00e      	b.n	8002f90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f72:	f7fe ff5f 	bl	8001e34 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d907      	bls.n	8002f90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e150      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
 8002f84:	40023800 	.word	0x40023800
 8002f88:	42470000 	.word	0x42470000
 8002f8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f90:	4b88      	ldr	r3, [pc, #544]	; (80031b4 <HAL_RCC_OscConfig+0x470>)
 8002f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1ea      	bne.n	8002f72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 8097 	beq.w	80030d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002faa:	2300      	movs	r3, #0
 8002fac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fae:	4b81      	ldr	r3, [pc, #516]	; (80031b4 <HAL_RCC_OscConfig+0x470>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10f      	bne.n	8002fda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	4b7d      	ldr	r3, [pc, #500]	; (80031b4 <HAL_RCC_OscConfig+0x470>)
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	4a7c      	ldr	r2, [pc, #496]	; (80031b4 <HAL_RCC_OscConfig+0x470>)
 8002fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fca:	4b7a      	ldr	r3, [pc, #488]	; (80031b4 <HAL_RCC_OscConfig+0x470>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd2:	60bb      	str	r3, [r7, #8]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fda:	4b77      	ldr	r3, [pc, #476]	; (80031b8 <HAL_RCC_OscConfig+0x474>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d118      	bne.n	8003018 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fe6:	4b74      	ldr	r3, [pc, #464]	; (80031b8 <HAL_RCC_OscConfig+0x474>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a73      	ldr	r2, [pc, #460]	; (80031b8 <HAL_RCC_OscConfig+0x474>)
 8002fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ff2:	f7fe ff1f 	bl	8001e34 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ffa:	f7fe ff1b 	bl	8001e34 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e10c      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300c:	4b6a      	ldr	r3, [pc, #424]	; (80031b8 <HAL_RCC_OscConfig+0x474>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f0      	beq.n	8002ffa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d106      	bne.n	800302e <HAL_RCC_OscConfig+0x2ea>
 8003020:	4b64      	ldr	r3, [pc, #400]	; (80031b4 <HAL_RCC_OscConfig+0x470>)
 8003022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003024:	4a63      	ldr	r2, [pc, #396]	; (80031b4 <HAL_RCC_OscConfig+0x470>)
 8003026:	f043 0301 	orr.w	r3, r3, #1
 800302a:	6713      	str	r3, [r2, #112]	; 0x70
 800302c:	e01c      	b.n	8003068 <HAL_RCC_OscConfig+0x324>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b05      	cmp	r3, #5
 8003034:	d10c      	bne.n	8003050 <HAL_RCC_OscConfig+0x30c>
 8003036:	4b5f      	ldr	r3, [pc, #380]	; (80031b4 <HAL_RCC_OscConfig+0x470>)
 8003038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303a:	4a5e      	ldr	r2, [pc, #376]	; (80031b4 <HAL_RCC_OscConfig+0x470>)
 800303c:	f043 0304 	orr.w	r3, r3, #4
 8003040:	6713      	str	r3, [r2, #112]	; 0x70
 8003042:	4b5c      	ldr	r3, [pc, #368]	; (80031b4 <HAL_RCC_OscConfig+0x470>)
 8003044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003046:	4a5b      	ldr	r2, [pc, #364]	; (80031b4 <HAL_RCC_OscConfig+0x470>)
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	6713      	str	r3, [r2, #112]	; 0x70
 800304e:	e00b      	b.n	8003068 <HAL_RCC_OscConfig+0x324>
 8003050:	4b58      	ldr	r3, [pc, #352]	; (80031b4 <HAL_RCC_OscConfig+0x470>)
 8003052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003054:	4a57      	ldr	r2, [pc, #348]	; (80031b4 <HAL_RCC_OscConfig+0x470>)
 8003056:	f023 0301 	bic.w	r3, r3, #1
 800305a:	6713      	str	r3, [r2, #112]	; 0x70
 800305c:	4b55      	ldr	r3, [pc, #340]	; (80031b4 <HAL_RCC_OscConfig+0x470>)
 800305e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003060:	4a54      	ldr	r2, [pc, #336]	; (80031b4 <HAL_RCC_OscConfig+0x470>)
 8003062:	f023 0304 	bic.w	r3, r3, #4
 8003066:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d015      	beq.n	800309c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003070:	f7fe fee0 	bl	8001e34 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003076:	e00a      	b.n	800308e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003078:	f7fe fedc 	bl	8001e34 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	f241 3288 	movw	r2, #5000	; 0x1388
 8003086:	4293      	cmp	r3, r2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e0cb      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800308e:	4b49      	ldr	r3, [pc, #292]	; (80031b4 <HAL_RCC_OscConfig+0x470>)
 8003090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0ee      	beq.n	8003078 <HAL_RCC_OscConfig+0x334>
 800309a:	e014      	b.n	80030c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800309c:	f7fe feca 	bl	8001e34 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a2:	e00a      	b.n	80030ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030a4:	f7fe fec6 	bl	8001e34 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e0b5      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ba:	4b3e      	ldr	r3, [pc, #248]	; (80031b4 <HAL_RCC_OscConfig+0x470>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1ee      	bne.n	80030a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030c6:	7dfb      	ldrb	r3, [r7, #23]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d105      	bne.n	80030d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030cc:	4b39      	ldr	r3, [pc, #228]	; (80031b4 <HAL_RCC_OscConfig+0x470>)
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	4a38      	ldr	r2, [pc, #224]	; (80031b4 <HAL_RCC_OscConfig+0x470>)
 80030d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 80a1 	beq.w	8003224 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030e2:	4b34      	ldr	r3, [pc, #208]	; (80031b4 <HAL_RCC_OscConfig+0x470>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 030c 	and.w	r3, r3, #12
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d05c      	beq.n	80031a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d141      	bne.n	800317a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f6:	4b31      	ldr	r3, [pc, #196]	; (80031bc <HAL_RCC_OscConfig+0x478>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fc:	f7fe fe9a 	bl	8001e34 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003104:	f7fe fe96 	bl	8001e34 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e087      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003116:	4b27      	ldr	r3, [pc, #156]	; (80031b4 <HAL_RCC_OscConfig+0x470>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f0      	bne.n	8003104 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69da      	ldr	r2, [r3, #28]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	019b      	lsls	r3, r3, #6
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	085b      	lsrs	r3, r3, #1
 800313a:	3b01      	subs	r3, #1
 800313c:	041b      	lsls	r3, r3, #16
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003144:	061b      	lsls	r3, r3, #24
 8003146:	491b      	ldr	r1, [pc, #108]	; (80031b4 <HAL_RCC_OscConfig+0x470>)
 8003148:	4313      	orrs	r3, r2
 800314a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800314c:	4b1b      	ldr	r3, [pc, #108]	; (80031bc <HAL_RCC_OscConfig+0x478>)
 800314e:	2201      	movs	r2, #1
 8003150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003152:	f7fe fe6f 	bl	8001e34 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003158:	e008      	b.n	800316c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800315a:	f7fe fe6b 	bl	8001e34 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e05c      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800316c:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <HAL_RCC_OscConfig+0x470>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0f0      	beq.n	800315a <HAL_RCC_OscConfig+0x416>
 8003178:	e054      	b.n	8003224 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800317a:	4b10      	ldr	r3, [pc, #64]	; (80031bc <HAL_RCC_OscConfig+0x478>)
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003180:	f7fe fe58 	bl	8001e34 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003188:	f7fe fe54 	bl	8001e34 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e045      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800319a:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <HAL_RCC_OscConfig+0x470>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0x444>
 80031a6:	e03d      	b.n	8003224 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d107      	bne.n	80031c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e038      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
 80031b4:	40023800 	.word	0x40023800
 80031b8:	40007000 	.word	0x40007000
 80031bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031c0:	4b1b      	ldr	r3, [pc, #108]	; (8003230 <HAL_RCC_OscConfig+0x4ec>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d028      	beq.n	8003220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031d8:	429a      	cmp	r2, r3
 80031da:	d121      	bne.n	8003220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d11a      	bne.n	8003220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031f0:	4013      	ands	r3, r2
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d111      	bne.n	8003220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003206:	085b      	lsrs	r3, r3, #1
 8003208:	3b01      	subs	r3, #1
 800320a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800320c:	429a      	cmp	r2, r3
 800320e:	d107      	bne.n	8003220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800321c:	429a      	cmp	r2, r3
 800321e:	d001      	beq.n	8003224 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e000      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40023800 	.word	0x40023800

08003234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e0cc      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003248:	4b68      	ldr	r3, [pc, #416]	; (80033ec <HAL_RCC_ClockConfig+0x1b8>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	429a      	cmp	r2, r3
 8003254:	d90c      	bls.n	8003270 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003256:	4b65      	ldr	r3, [pc, #404]	; (80033ec <HAL_RCC_ClockConfig+0x1b8>)
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800325e:	4b63      	ldr	r3, [pc, #396]	; (80033ec <HAL_RCC_ClockConfig+0x1b8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d001      	beq.n	8003270 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e0b8      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d020      	beq.n	80032be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d005      	beq.n	8003294 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003288:	4b59      	ldr	r3, [pc, #356]	; (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	4a58      	ldr	r2, [pc, #352]	; (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003292:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0308 	and.w	r3, r3, #8
 800329c:	2b00      	cmp	r3, #0
 800329e:	d005      	beq.n	80032ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032a0:	4b53      	ldr	r3, [pc, #332]	; (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	4a52      	ldr	r2, [pc, #328]	; (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032ac:	4b50      	ldr	r3, [pc, #320]	; (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	494d      	ldr	r1, [pc, #308]	; (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d044      	beq.n	8003354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d107      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d2:	4b47      	ldr	r3, [pc, #284]	; (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d119      	bne.n	8003312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e07f      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d003      	beq.n	80032f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ee:	2b03      	cmp	r3, #3
 80032f0:	d107      	bne.n	8003302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f2:	4b3f      	ldr	r3, [pc, #252]	; (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d109      	bne.n	8003312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e06f      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003302:	4b3b      	ldr	r3, [pc, #236]	; (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e067      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003312:	4b37      	ldr	r3, [pc, #220]	; (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f023 0203 	bic.w	r2, r3, #3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	4934      	ldr	r1, [pc, #208]	; (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	4313      	orrs	r3, r2
 8003322:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003324:	f7fe fd86 	bl	8001e34 <HAL_GetTick>
 8003328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800332a:	e00a      	b.n	8003342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800332c:	f7fe fd82 	bl	8001e34 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	f241 3288 	movw	r2, #5000	; 0x1388
 800333a:	4293      	cmp	r3, r2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e04f      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003342:	4b2b      	ldr	r3, [pc, #172]	; (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 020c 	and.w	r2, r3, #12
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	429a      	cmp	r2, r3
 8003352:	d1eb      	bne.n	800332c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003354:	4b25      	ldr	r3, [pc, #148]	; (80033ec <HAL_RCC_ClockConfig+0x1b8>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d20c      	bcs.n	800337c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003362:	4b22      	ldr	r3, [pc, #136]	; (80033ec <HAL_RCC_ClockConfig+0x1b8>)
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800336a:	4b20      	ldr	r3, [pc, #128]	; (80033ec <HAL_RCC_ClockConfig+0x1b8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	d001      	beq.n	800337c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e032      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	d008      	beq.n	800339a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003388:	4b19      	ldr	r3, [pc, #100]	; (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	4916      	ldr	r1, [pc, #88]	; (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	4313      	orrs	r3, r2
 8003398:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d009      	beq.n	80033ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033a6:	4b12      	ldr	r3, [pc, #72]	; (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	490e      	ldr	r1, [pc, #56]	; (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033ba:	f000 f821 	bl	8003400 <HAL_RCC_GetSysClockFreq>
 80033be:	4602      	mov	r2, r0
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	091b      	lsrs	r3, r3, #4
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	490a      	ldr	r1, [pc, #40]	; (80033f4 <HAL_RCC_ClockConfig+0x1c0>)
 80033cc:	5ccb      	ldrb	r3, [r1, r3]
 80033ce:	fa22 f303 	lsr.w	r3, r2, r3
 80033d2:	4a09      	ldr	r2, [pc, #36]	; (80033f8 <HAL_RCC_ClockConfig+0x1c4>)
 80033d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033d6:	4b09      	ldr	r3, [pc, #36]	; (80033fc <HAL_RCC_ClockConfig+0x1c8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fe fce6 	bl	8001dac <HAL_InitTick>

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40023c00 	.word	0x40023c00
 80033f0:	40023800 	.word	0x40023800
 80033f4:	08005330 	.word	0x08005330
 80033f8:	20000000 	.word	0x20000000
 80033fc:	20000004 	.word	0x20000004

08003400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003404:	b094      	sub	sp, #80	; 0x50
 8003406:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	647b      	str	r3, [r7, #68]	; 0x44
 800340c:	2300      	movs	r3, #0
 800340e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003410:	2300      	movs	r3, #0
 8003412:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003418:	4b79      	ldr	r3, [pc, #484]	; (8003600 <HAL_RCC_GetSysClockFreq+0x200>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 030c 	and.w	r3, r3, #12
 8003420:	2b08      	cmp	r3, #8
 8003422:	d00d      	beq.n	8003440 <HAL_RCC_GetSysClockFreq+0x40>
 8003424:	2b08      	cmp	r3, #8
 8003426:	f200 80e1 	bhi.w	80035ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <HAL_RCC_GetSysClockFreq+0x34>
 800342e:	2b04      	cmp	r3, #4
 8003430:	d003      	beq.n	800343a <HAL_RCC_GetSysClockFreq+0x3a>
 8003432:	e0db      	b.n	80035ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003434:	4b73      	ldr	r3, [pc, #460]	; (8003604 <HAL_RCC_GetSysClockFreq+0x204>)
 8003436:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003438:	e0db      	b.n	80035f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800343a:	4b73      	ldr	r3, [pc, #460]	; (8003608 <HAL_RCC_GetSysClockFreq+0x208>)
 800343c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800343e:	e0d8      	b.n	80035f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003440:	4b6f      	ldr	r3, [pc, #444]	; (8003600 <HAL_RCC_GetSysClockFreq+0x200>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003448:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800344a:	4b6d      	ldr	r3, [pc, #436]	; (8003600 <HAL_RCC_GetSysClockFreq+0x200>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d063      	beq.n	800351e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003456:	4b6a      	ldr	r3, [pc, #424]	; (8003600 <HAL_RCC_GetSysClockFreq+0x200>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	099b      	lsrs	r3, r3, #6
 800345c:	2200      	movs	r2, #0
 800345e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003460:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003468:	633b      	str	r3, [r7, #48]	; 0x30
 800346a:	2300      	movs	r3, #0
 800346c:	637b      	str	r3, [r7, #52]	; 0x34
 800346e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003472:	4622      	mov	r2, r4
 8003474:	462b      	mov	r3, r5
 8003476:	f04f 0000 	mov.w	r0, #0
 800347a:	f04f 0100 	mov.w	r1, #0
 800347e:	0159      	lsls	r1, r3, #5
 8003480:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003484:	0150      	lsls	r0, r2, #5
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	4621      	mov	r1, r4
 800348c:	1a51      	subs	r1, r2, r1
 800348e:	6139      	str	r1, [r7, #16]
 8003490:	4629      	mov	r1, r5
 8003492:	eb63 0301 	sbc.w	r3, r3, r1
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034a4:	4659      	mov	r1, fp
 80034a6:	018b      	lsls	r3, r1, #6
 80034a8:	4651      	mov	r1, sl
 80034aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034ae:	4651      	mov	r1, sl
 80034b0:	018a      	lsls	r2, r1, #6
 80034b2:	4651      	mov	r1, sl
 80034b4:	ebb2 0801 	subs.w	r8, r2, r1
 80034b8:	4659      	mov	r1, fp
 80034ba:	eb63 0901 	sbc.w	r9, r3, r1
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034d2:	4690      	mov	r8, r2
 80034d4:	4699      	mov	r9, r3
 80034d6:	4623      	mov	r3, r4
 80034d8:	eb18 0303 	adds.w	r3, r8, r3
 80034dc:	60bb      	str	r3, [r7, #8]
 80034de:	462b      	mov	r3, r5
 80034e0:	eb49 0303 	adc.w	r3, r9, r3
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	f04f 0300 	mov.w	r3, #0
 80034ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034f2:	4629      	mov	r1, r5
 80034f4:	024b      	lsls	r3, r1, #9
 80034f6:	4621      	mov	r1, r4
 80034f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034fc:	4621      	mov	r1, r4
 80034fe:	024a      	lsls	r2, r1, #9
 8003500:	4610      	mov	r0, r2
 8003502:	4619      	mov	r1, r3
 8003504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003506:	2200      	movs	r2, #0
 8003508:	62bb      	str	r3, [r7, #40]	; 0x28
 800350a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800350c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003510:	f7fd faf4 	bl	8000afc <__aeabi_uldivmod>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	4613      	mov	r3, r2
 800351a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800351c:	e058      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800351e:	4b38      	ldr	r3, [pc, #224]	; (8003600 <HAL_RCC_GetSysClockFreq+0x200>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	099b      	lsrs	r3, r3, #6
 8003524:	2200      	movs	r2, #0
 8003526:	4618      	mov	r0, r3
 8003528:	4611      	mov	r1, r2
 800352a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800352e:	623b      	str	r3, [r7, #32]
 8003530:	2300      	movs	r3, #0
 8003532:	627b      	str	r3, [r7, #36]	; 0x24
 8003534:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003538:	4642      	mov	r2, r8
 800353a:	464b      	mov	r3, r9
 800353c:	f04f 0000 	mov.w	r0, #0
 8003540:	f04f 0100 	mov.w	r1, #0
 8003544:	0159      	lsls	r1, r3, #5
 8003546:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800354a:	0150      	lsls	r0, r2, #5
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	4641      	mov	r1, r8
 8003552:	ebb2 0a01 	subs.w	sl, r2, r1
 8003556:	4649      	mov	r1, r9
 8003558:	eb63 0b01 	sbc.w	fp, r3, r1
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003568:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800356c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003570:	ebb2 040a 	subs.w	r4, r2, sl
 8003574:	eb63 050b 	sbc.w	r5, r3, fp
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	00eb      	lsls	r3, r5, #3
 8003582:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003586:	00e2      	lsls	r2, r4, #3
 8003588:	4614      	mov	r4, r2
 800358a:	461d      	mov	r5, r3
 800358c:	4643      	mov	r3, r8
 800358e:	18e3      	adds	r3, r4, r3
 8003590:	603b      	str	r3, [r7, #0]
 8003592:	464b      	mov	r3, r9
 8003594:	eb45 0303 	adc.w	r3, r5, r3
 8003598:	607b      	str	r3, [r7, #4]
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035a6:	4629      	mov	r1, r5
 80035a8:	028b      	lsls	r3, r1, #10
 80035aa:	4621      	mov	r1, r4
 80035ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035b0:	4621      	mov	r1, r4
 80035b2:	028a      	lsls	r2, r1, #10
 80035b4:	4610      	mov	r0, r2
 80035b6:	4619      	mov	r1, r3
 80035b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ba:	2200      	movs	r2, #0
 80035bc:	61bb      	str	r3, [r7, #24]
 80035be:	61fa      	str	r2, [r7, #28]
 80035c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035c4:	f7fd fa9a 	bl	8000afc <__aeabi_uldivmod>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4613      	mov	r3, r2
 80035ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <HAL_RCC_GetSysClockFreq+0x200>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	0c1b      	lsrs	r3, r3, #16
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	3301      	adds	r3, #1
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80035e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035ea:	e002      	b.n	80035f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035ec:	4b05      	ldr	r3, [pc, #20]	; (8003604 <HAL_RCC_GetSysClockFreq+0x204>)
 80035ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3750      	adds	r7, #80	; 0x50
 80035f8:	46bd      	mov	sp, r7
 80035fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035fe:	bf00      	nop
 8003600:	40023800 	.word	0x40023800
 8003604:	00f42400 	.word	0x00f42400
 8003608:	007a1200 	.word	0x007a1200

0800360c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003610:	4b03      	ldr	r3, [pc, #12]	; (8003620 <HAL_RCC_GetHCLKFreq+0x14>)
 8003612:	681b      	ldr	r3, [r3, #0]
}
 8003614:	4618      	mov	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	20000000 	.word	0x20000000

08003624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003628:	f7ff fff0 	bl	800360c <HAL_RCC_GetHCLKFreq>
 800362c:	4602      	mov	r2, r0
 800362e:	4b05      	ldr	r3, [pc, #20]	; (8003644 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	0a9b      	lsrs	r3, r3, #10
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	4903      	ldr	r1, [pc, #12]	; (8003648 <HAL_RCC_GetPCLK1Freq+0x24>)
 800363a:	5ccb      	ldrb	r3, [r1, r3]
 800363c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003640:	4618      	mov	r0, r3
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40023800 	.word	0x40023800
 8003648:	08005340 	.word	0x08005340

0800364c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e041      	b.n	80036e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7fe fa44 	bl	8001b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3304      	adds	r3, #4
 8003688:	4619      	mov	r1, r3
 800368a:	4610      	mov	r0, r2
 800368c:	f000 fda4 	bl	80041d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
	...

080036ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d001      	beq.n	8003704 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e04e      	b.n	80037a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0201 	orr.w	r2, r2, #1
 800371a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a23      	ldr	r2, [pc, #140]	; (80037b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d022      	beq.n	800376c <HAL_TIM_Base_Start_IT+0x80>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800372e:	d01d      	beq.n	800376c <HAL_TIM_Base_Start_IT+0x80>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a1f      	ldr	r2, [pc, #124]	; (80037b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d018      	beq.n	800376c <HAL_TIM_Base_Start_IT+0x80>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a1e      	ldr	r2, [pc, #120]	; (80037b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d013      	beq.n	800376c <HAL_TIM_Base_Start_IT+0x80>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a1c      	ldr	r2, [pc, #112]	; (80037bc <HAL_TIM_Base_Start_IT+0xd0>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d00e      	beq.n	800376c <HAL_TIM_Base_Start_IT+0x80>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a1b      	ldr	r2, [pc, #108]	; (80037c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d009      	beq.n	800376c <HAL_TIM_Base_Start_IT+0x80>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a19      	ldr	r2, [pc, #100]	; (80037c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d004      	beq.n	800376c <HAL_TIM_Base_Start_IT+0x80>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a18      	ldr	r2, [pc, #96]	; (80037c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d111      	bne.n	8003790 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2b06      	cmp	r3, #6
 800377c:	d010      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f042 0201 	orr.w	r2, r2, #1
 800378c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800378e:	e007      	b.n	80037a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0201 	orr.w	r2, r2, #1
 800379e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40010000 	.word	0x40010000
 80037b4:	40000400 	.word	0x40000400
 80037b8:	40000800 	.word	0x40000800
 80037bc:	40000c00 	.word	0x40000c00
 80037c0:	40010400 	.word	0x40010400
 80037c4:	40014000 	.word	0x40014000
 80037c8:	40001800 	.word	0x40001800

080037cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e041      	b.n	8003862 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7fe f91c 	bl	8001a30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3304      	adds	r3, #4
 8003808:	4619      	mov	r1, r3
 800380a:	4610      	mov	r0, r2
 800380c:	f000 fce4 	bl	80041d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
	...

0800386c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d109      	bne.n	8003890 <HAL_TIM_PWM_Start+0x24>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b01      	cmp	r3, #1
 8003886:	bf14      	ite	ne
 8003888:	2301      	movne	r3, #1
 800388a:	2300      	moveq	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	e022      	b.n	80038d6 <HAL_TIM_PWM_Start+0x6a>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2b04      	cmp	r3, #4
 8003894:	d109      	bne.n	80038aa <HAL_TIM_PWM_Start+0x3e>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b01      	cmp	r3, #1
 80038a0:	bf14      	ite	ne
 80038a2:	2301      	movne	r3, #1
 80038a4:	2300      	moveq	r3, #0
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	e015      	b.n	80038d6 <HAL_TIM_PWM_Start+0x6a>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d109      	bne.n	80038c4 <HAL_TIM_PWM_Start+0x58>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	bf14      	ite	ne
 80038bc:	2301      	movne	r3, #1
 80038be:	2300      	moveq	r3, #0
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	e008      	b.n	80038d6 <HAL_TIM_PWM_Start+0x6a>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	bf14      	ite	ne
 80038d0:	2301      	movne	r3, #1
 80038d2:	2300      	moveq	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e07c      	b.n	80039d8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d104      	bne.n	80038ee <HAL_TIM_PWM_Start+0x82>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038ec:	e013      	b.n	8003916 <HAL_TIM_PWM_Start+0xaa>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	d104      	bne.n	80038fe <HAL_TIM_PWM_Start+0x92>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038fc:	e00b      	b.n	8003916 <HAL_TIM_PWM_Start+0xaa>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b08      	cmp	r3, #8
 8003902:	d104      	bne.n	800390e <HAL_TIM_PWM_Start+0xa2>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800390c:	e003      	b.n	8003916 <HAL_TIM_PWM_Start+0xaa>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2202      	movs	r2, #2
 8003912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2201      	movs	r2, #1
 800391c:	6839      	ldr	r1, [r7, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f000 ff44 	bl	80047ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a2d      	ldr	r2, [pc, #180]	; (80039e0 <HAL_TIM_PWM_Start+0x174>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d004      	beq.n	8003938 <HAL_TIM_PWM_Start+0xcc>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a2c      	ldr	r2, [pc, #176]	; (80039e4 <HAL_TIM_PWM_Start+0x178>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d101      	bne.n	800393c <HAL_TIM_PWM_Start+0xd0>
 8003938:	2301      	movs	r3, #1
 800393a:	e000      	b.n	800393e <HAL_TIM_PWM_Start+0xd2>
 800393c:	2300      	movs	r3, #0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d007      	beq.n	8003952 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003950:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a22      	ldr	r2, [pc, #136]	; (80039e0 <HAL_TIM_PWM_Start+0x174>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d022      	beq.n	80039a2 <HAL_TIM_PWM_Start+0x136>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003964:	d01d      	beq.n	80039a2 <HAL_TIM_PWM_Start+0x136>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a1f      	ldr	r2, [pc, #124]	; (80039e8 <HAL_TIM_PWM_Start+0x17c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d018      	beq.n	80039a2 <HAL_TIM_PWM_Start+0x136>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a1d      	ldr	r2, [pc, #116]	; (80039ec <HAL_TIM_PWM_Start+0x180>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d013      	beq.n	80039a2 <HAL_TIM_PWM_Start+0x136>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a1c      	ldr	r2, [pc, #112]	; (80039f0 <HAL_TIM_PWM_Start+0x184>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d00e      	beq.n	80039a2 <HAL_TIM_PWM_Start+0x136>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a16      	ldr	r2, [pc, #88]	; (80039e4 <HAL_TIM_PWM_Start+0x178>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d009      	beq.n	80039a2 <HAL_TIM_PWM_Start+0x136>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a18      	ldr	r2, [pc, #96]	; (80039f4 <HAL_TIM_PWM_Start+0x188>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d004      	beq.n	80039a2 <HAL_TIM_PWM_Start+0x136>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a16      	ldr	r2, [pc, #88]	; (80039f8 <HAL_TIM_PWM_Start+0x18c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d111      	bne.n	80039c6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2b06      	cmp	r3, #6
 80039b2:	d010      	beq.n	80039d6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0201 	orr.w	r2, r2, #1
 80039c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c4:	e007      	b.n	80039d6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f042 0201 	orr.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40010000 	.word	0x40010000
 80039e4:	40010400 	.word	0x40010400
 80039e8:	40000400 	.word	0x40000400
 80039ec:	40000800 	.word	0x40000800
 80039f0:	40000c00 	.word	0x40000c00
 80039f4:	40014000 	.word	0x40014000
 80039f8:	40001800 	.word	0x40001800

080039fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e097      	b.n	8003b40 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d106      	bne.n	8003a2a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7fe f825 	bl	8001a74 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6812      	ldr	r2, [r2, #0]
 8003a3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a40:	f023 0307 	bic.w	r3, r3, #7
 8003a44:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	4619      	mov	r1, r3
 8003a50:	4610      	mov	r0, r2
 8003a52:	f000 fbc1 	bl	80041d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a7e:	f023 0303 	bic.w	r3, r3, #3
 8003a82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	021b      	lsls	r3, r3, #8
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003a9c:	f023 030c 	bic.w	r3, r3, #12
 8003aa0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003aa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	021b      	lsls	r3, r3, #8
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	011a      	lsls	r2, r3, #4
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	031b      	lsls	r3, r3, #12
 8003acc:	4313      	orrs	r3, r2
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003ada:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003ae2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	4313      	orrs	r3, r2
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b58:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b60:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b68:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b70:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d110      	bne.n	8003b9a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d102      	bne.n	8003b84 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b7e:	7b7b      	ldrb	r3, [r7, #13]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d001      	beq.n	8003b88 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e069      	b.n	8003c5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b98:	e031      	b.n	8003bfe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d110      	bne.n	8003bc2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ba0:	7bbb      	ldrb	r3, [r7, #14]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d102      	bne.n	8003bac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ba6:	7b3b      	ldrb	r3, [r7, #12]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d001      	beq.n	8003bb0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e055      	b.n	8003c5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bc0:	e01d      	b.n	8003bfe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bc2:	7bfb      	ldrb	r3, [r7, #15]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d108      	bne.n	8003bda <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bc8:	7bbb      	ldrb	r3, [r7, #14]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d105      	bne.n	8003bda <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bce:	7b7b      	ldrb	r3, [r7, #13]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d102      	bne.n	8003bda <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003bd4:	7b3b      	ldrb	r3, [r7, #12]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d001      	beq.n	8003bde <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e03e      	b.n	8003c5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2202      	movs	r2, #2
 8003be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2202      	movs	r2, #2
 8003bea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <HAL_TIM_Encoder_Start+0xc4>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d008      	beq.n	8003c1c <HAL_TIM_Encoder_Start+0xd4>
 8003c0a:	e00f      	b.n	8003c2c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2201      	movs	r2, #1
 8003c12:	2100      	movs	r1, #0
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 fdc9 	bl	80047ac <TIM_CCxChannelCmd>
      break;
 8003c1a:	e016      	b.n	8003c4a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2201      	movs	r2, #1
 8003c22:	2104      	movs	r1, #4
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 fdc1 	bl	80047ac <TIM_CCxChannelCmd>
      break;
 8003c2a:	e00e      	b.n	8003c4a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2201      	movs	r2, #1
 8003c32:	2100      	movs	r1, #0
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 fdb9 	bl	80047ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	2104      	movs	r1, #4
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fdb2 	bl	80047ac <TIM_CCxChannelCmd>
      break;
 8003c48:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f042 0201 	orr.w	r2, r2, #1
 8003c58:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d122      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d11b      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f06f 0202 	mvn.w	r2, #2
 8003c90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 fa77 	bl	800419a <HAL_TIM_IC_CaptureCallback>
 8003cac:	e005      	b.n	8003cba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fa69 	bl	8004186 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 fa7a 	bl	80041ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d122      	bne.n	8003d14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	d11b      	bne.n	8003d14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f06f 0204 	mvn.w	r2, #4
 8003ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2202      	movs	r2, #2
 8003cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 fa4d 	bl	800419a <HAL_TIM_IC_CaptureCallback>
 8003d00:	e005      	b.n	8003d0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 fa3f 	bl	8004186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 fa50 	bl	80041ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d122      	bne.n	8003d68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	f003 0308 	and.w	r3, r3, #8
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d11b      	bne.n	8003d68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f06f 0208 	mvn.w	r2, #8
 8003d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2204      	movs	r2, #4
 8003d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 fa23 	bl	800419a <HAL_TIM_IC_CaptureCallback>
 8003d54:	e005      	b.n	8003d62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 fa15 	bl	8004186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 fa26 	bl	80041ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f003 0310 	and.w	r3, r3, #16
 8003d72:	2b10      	cmp	r3, #16
 8003d74:	d122      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f003 0310 	and.w	r3, r3, #16
 8003d80:	2b10      	cmp	r3, #16
 8003d82:	d11b      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f06f 0210 	mvn.w	r2, #16
 8003d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2208      	movs	r2, #8
 8003d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f9f9 	bl	800419a <HAL_TIM_IC_CaptureCallback>
 8003da8:	e005      	b.n	8003db6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f9eb 	bl	8004186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f9fc 	bl	80041ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d10e      	bne.n	8003de8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d107      	bne.n	8003de8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f06f 0201 	mvn.w	r2, #1
 8003de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7fd fef0 	bl	8001bc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df2:	2b80      	cmp	r3, #128	; 0x80
 8003df4:	d10e      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e00:	2b80      	cmp	r3, #128	; 0x80
 8003e02:	d107      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 fdca 	bl	80049a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1e:	2b40      	cmp	r3, #64	; 0x40
 8003e20:	d10e      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2c:	2b40      	cmp	r3, #64	; 0x40
 8003e2e:	d107      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f9c1 	bl	80041c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0320 	and.w	r3, r3, #32
 8003e4a:	2b20      	cmp	r3, #32
 8003e4c:	d10e      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0320 	and.w	r3, r3, #32
 8003e58:	2b20      	cmp	r3, #32
 8003e5a:	d107      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0220 	mvn.w	r2, #32
 8003e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 fd94 	bl	8004994 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e6c:	bf00      	nop
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e80:	2300      	movs	r3, #0
 8003e82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e0ae      	b.n	8003ff0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b0c      	cmp	r3, #12
 8003e9e:	f200 809f 	bhi.w	8003fe0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ea2:	a201      	add	r2, pc, #4	; (adr r2, 8003ea8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea8:	08003edd 	.word	0x08003edd
 8003eac:	08003fe1 	.word	0x08003fe1
 8003eb0:	08003fe1 	.word	0x08003fe1
 8003eb4:	08003fe1 	.word	0x08003fe1
 8003eb8:	08003f1d 	.word	0x08003f1d
 8003ebc:	08003fe1 	.word	0x08003fe1
 8003ec0:	08003fe1 	.word	0x08003fe1
 8003ec4:	08003fe1 	.word	0x08003fe1
 8003ec8:	08003f5f 	.word	0x08003f5f
 8003ecc:	08003fe1 	.word	0x08003fe1
 8003ed0:	08003fe1 	.word	0x08003fe1
 8003ed4:	08003fe1 	.word	0x08003fe1
 8003ed8:	08003f9f 	.word	0x08003f9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68b9      	ldr	r1, [r7, #8]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 fa18 	bl	8004318 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699a      	ldr	r2, [r3, #24]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0208 	orr.w	r2, r2, #8
 8003ef6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699a      	ldr	r2, [r3, #24]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0204 	bic.w	r2, r2, #4
 8003f06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6999      	ldr	r1, [r3, #24]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	691a      	ldr	r2, [r3, #16]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	619a      	str	r2, [r3, #24]
      break;
 8003f1a:	e064      	b.n	8003fe6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68b9      	ldr	r1, [r7, #8]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fa68 	bl	80043f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699a      	ldr	r2, [r3, #24]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	699a      	ldr	r2, [r3, #24]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6999      	ldr	r1, [r3, #24]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	021a      	lsls	r2, r3, #8
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	619a      	str	r2, [r3, #24]
      break;
 8003f5c:	e043      	b.n	8003fe6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68b9      	ldr	r1, [r7, #8]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 fabd 	bl	80044e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69da      	ldr	r2, [r3, #28]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f042 0208 	orr.w	r2, r2, #8
 8003f78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69da      	ldr	r2, [r3, #28]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0204 	bic.w	r2, r2, #4
 8003f88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	69d9      	ldr	r1, [r3, #28]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	61da      	str	r2, [r3, #28]
      break;
 8003f9c:	e023      	b.n	8003fe6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68b9      	ldr	r1, [r7, #8]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 fb11 	bl	80045cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69da      	ldr	r2, [r3, #28]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69da      	ldr	r2, [r3, #28]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	69d9      	ldr	r1, [r3, #28]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	021a      	lsls	r2, r3, #8
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	61da      	str	r2, [r3, #28]
      break;
 8003fde:	e002      	b.n	8003fe6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8003fe4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800400c:	2b01      	cmp	r3, #1
 800400e:	d101      	bne.n	8004014 <HAL_TIM_ConfigClockSource+0x1c>
 8004010:	2302      	movs	r3, #2
 8004012:	e0b4      	b.n	800417e <HAL_TIM_ConfigClockSource+0x186>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2202      	movs	r2, #2
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004032:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800403a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800404c:	d03e      	beq.n	80040cc <HAL_TIM_ConfigClockSource+0xd4>
 800404e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004052:	f200 8087 	bhi.w	8004164 <HAL_TIM_ConfigClockSource+0x16c>
 8004056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800405a:	f000 8086 	beq.w	800416a <HAL_TIM_ConfigClockSource+0x172>
 800405e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004062:	d87f      	bhi.n	8004164 <HAL_TIM_ConfigClockSource+0x16c>
 8004064:	2b70      	cmp	r3, #112	; 0x70
 8004066:	d01a      	beq.n	800409e <HAL_TIM_ConfigClockSource+0xa6>
 8004068:	2b70      	cmp	r3, #112	; 0x70
 800406a:	d87b      	bhi.n	8004164 <HAL_TIM_ConfigClockSource+0x16c>
 800406c:	2b60      	cmp	r3, #96	; 0x60
 800406e:	d050      	beq.n	8004112 <HAL_TIM_ConfigClockSource+0x11a>
 8004070:	2b60      	cmp	r3, #96	; 0x60
 8004072:	d877      	bhi.n	8004164 <HAL_TIM_ConfigClockSource+0x16c>
 8004074:	2b50      	cmp	r3, #80	; 0x50
 8004076:	d03c      	beq.n	80040f2 <HAL_TIM_ConfigClockSource+0xfa>
 8004078:	2b50      	cmp	r3, #80	; 0x50
 800407a:	d873      	bhi.n	8004164 <HAL_TIM_ConfigClockSource+0x16c>
 800407c:	2b40      	cmp	r3, #64	; 0x40
 800407e:	d058      	beq.n	8004132 <HAL_TIM_ConfigClockSource+0x13a>
 8004080:	2b40      	cmp	r3, #64	; 0x40
 8004082:	d86f      	bhi.n	8004164 <HAL_TIM_ConfigClockSource+0x16c>
 8004084:	2b30      	cmp	r3, #48	; 0x30
 8004086:	d064      	beq.n	8004152 <HAL_TIM_ConfigClockSource+0x15a>
 8004088:	2b30      	cmp	r3, #48	; 0x30
 800408a:	d86b      	bhi.n	8004164 <HAL_TIM_ConfigClockSource+0x16c>
 800408c:	2b20      	cmp	r3, #32
 800408e:	d060      	beq.n	8004152 <HAL_TIM_ConfigClockSource+0x15a>
 8004090:	2b20      	cmp	r3, #32
 8004092:	d867      	bhi.n	8004164 <HAL_TIM_ConfigClockSource+0x16c>
 8004094:	2b00      	cmp	r3, #0
 8004096:	d05c      	beq.n	8004152 <HAL_TIM_ConfigClockSource+0x15a>
 8004098:	2b10      	cmp	r3, #16
 800409a:	d05a      	beq.n	8004152 <HAL_TIM_ConfigClockSource+0x15a>
 800409c:	e062      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6818      	ldr	r0, [r3, #0]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	6899      	ldr	r1, [r3, #8]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f000 fb5d 	bl	800476c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	609a      	str	r2, [r3, #8]
      break;
 80040ca:	e04f      	b.n	800416c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6818      	ldr	r0, [r3, #0]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	6899      	ldr	r1, [r3, #8]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f000 fb46 	bl	800476c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689a      	ldr	r2, [r3, #8]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040ee:	609a      	str	r2, [r3, #8]
      break;
 80040f0:	e03c      	b.n	800416c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6818      	ldr	r0, [r3, #0]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	6859      	ldr	r1, [r3, #4]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	461a      	mov	r2, r3
 8004100:	f000 faba 	bl	8004678 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2150      	movs	r1, #80	; 0x50
 800410a:	4618      	mov	r0, r3
 800410c:	f000 fb13 	bl	8004736 <TIM_ITRx_SetConfig>
      break;
 8004110:	e02c      	b.n	800416c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6818      	ldr	r0, [r3, #0]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	6859      	ldr	r1, [r3, #4]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	461a      	mov	r2, r3
 8004120:	f000 fad9 	bl	80046d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2160      	movs	r1, #96	; 0x60
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fb03 	bl	8004736 <TIM_ITRx_SetConfig>
      break;
 8004130:	e01c      	b.n	800416c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6818      	ldr	r0, [r3, #0]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	6859      	ldr	r1, [r3, #4]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	461a      	mov	r2, r3
 8004140:	f000 fa9a 	bl	8004678 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2140      	movs	r1, #64	; 0x40
 800414a:	4618      	mov	r0, r3
 800414c:	f000 faf3 	bl	8004736 <TIM_ITRx_SetConfig>
      break;
 8004150:	e00c      	b.n	800416c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4619      	mov	r1, r3
 800415c:	4610      	mov	r0, r2
 800415e:	f000 faea 	bl	8004736 <TIM_ITRx_SetConfig>
      break;
 8004162:	e003      	b.n	800416c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	73fb      	strb	r3, [r7, #15]
      break;
 8004168:	e000      	b.n	800416c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800416a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800417c:	7bfb      	ldrb	r3, [r7, #15]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
	...

080041d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a40      	ldr	r2, [pc, #256]	; (80042ec <TIM_Base_SetConfig+0x114>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d013      	beq.n	8004218 <TIM_Base_SetConfig+0x40>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f6:	d00f      	beq.n	8004218 <TIM_Base_SetConfig+0x40>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a3d      	ldr	r2, [pc, #244]	; (80042f0 <TIM_Base_SetConfig+0x118>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d00b      	beq.n	8004218 <TIM_Base_SetConfig+0x40>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a3c      	ldr	r2, [pc, #240]	; (80042f4 <TIM_Base_SetConfig+0x11c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d007      	beq.n	8004218 <TIM_Base_SetConfig+0x40>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a3b      	ldr	r2, [pc, #236]	; (80042f8 <TIM_Base_SetConfig+0x120>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d003      	beq.n	8004218 <TIM_Base_SetConfig+0x40>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a3a      	ldr	r2, [pc, #232]	; (80042fc <TIM_Base_SetConfig+0x124>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d108      	bne.n	800422a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	4313      	orrs	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a2f      	ldr	r2, [pc, #188]	; (80042ec <TIM_Base_SetConfig+0x114>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d02b      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004238:	d027      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a2c      	ldr	r2, [pc, #176]	; (80042f0 <TIM_Base_SetConfig+0x118>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d023      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a2b      	ldr	r2, [pc, #172]	; (80042f4 <TIM_Base_SetConfig+0x11c>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d01f      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a2a      	ldr	r2, [pc, #168]	; (80042f8 <TIM_Base_SetConfig+0x120>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d01b      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a29      	ldr	r2, [pc, #164]	; (80042fc <TIM_Base_SetConfig+0x124>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d017      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a28      	ldr	r2, [pc, #160]	; (8004300 <TIM_Base_SetConfig+0x128>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d013      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a27      	ldr	r2, [pc, #156]	; (8004304 <TIM_Base_SetConfig+0x12c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d00f      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a26      	ldr	r2, [pc, #152]	; (8004308 <TIM_Base_SetConfig+0x130>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00b      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a25      	ldr	r2, [pc, #148]	; (800430c <TIM_Base_SetConfig+0x134>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d007      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a24      	ldr	r2, [pc, #144]	; (8004310 <TIM_Base_SetConfig+0x138>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d003      	beq.n	800428a <TIM_Base_SetConfig+0xb2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a23      	ldr	r2, [pc, #140]	; (8004314 <TIM_Base_SetConfig+0x13c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d108      	bne.n	800429c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	4313      	orrs	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a0a      	ldr	r2, [pc, #40]	; (80042ec <TIM_Base_SetConfig+0x114>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d003      	beq.n	80042d0 <TIM_Base_SetConfig+0xf8>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a0c      	ldr	r2, [pc, #48]	; (80042fc <TIM_Base_SetConfig+0x124>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d103      	bne.n	80042d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	615a      	str	r2, [r3, #20]
}
 80042de:	bf00      	nop
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	40010000 	.word	0x40010000
 80042f0:	40000400 	.word	0x40000400
 80042f4:	40000800 	.word	0x40000800
 80042f8:	40000c00 	.word	0x40000c00
 80042fc:	40010400 	.word	0x40010400
 8004300:	40014000 	.word	0x40014000
 8004304:	40014400 	.word	0x40014400
 8004308:	40014800 	.word	0x40014800
 800430c:	40001800 	.word	0x40001800
 8004310:	40001c00 	.word	0x40001c00
 8004314:	40002000 	.word	0x40002000

08004318 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	f023 0201 	bic.w	r2, r3, #1
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0303 	bic.w	r3, r3, #3
 800434e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f023 0302 	bic.w	r3, r3, #2
 8004360:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	4313      	orrs	r3, r2
 800436a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a20      	ldr	r2, [pc, #128]	; (80043f0 <TIM_OC1_SetConfig+0xd8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d003      	beq.n	800437c <TIM_OC1_SetConfig+0x64>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a1f      	ldr	r2, [pc, #124]	; (80043f4 <TIM_OC1_SetConfig+0xdc>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d10c      	bne.n	8004396 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f023 0308 	bic.w	r3, r3, #8
 8004382:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	4313      	orrs	r3, r2
 800438c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f023 0304 	bic.w	r3, r3, #4
 8004394:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a15      	ldr	r2, [pc, #84]	; (80043f0 <TIM_OC1_SetConfig+0xd8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d003      	beq.n	80043a6 <TIM_OC1_SetConfig+0x8e>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a14      	ldr	r2, [pc, #80]	; (80043f4 <TIM_OC1_SetConfig+0xdc>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d111      	bne.n	80043ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	4313      	orrs	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	621a      	str	r2, [r3, #32]
}
 80043e4:	bf00      	nop
 80043e6:	371c      	adds	r7, #28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	40010000 	.word	0x40010000
 80043f4:	40010400 	.word	0x40010400

080043f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	f023 0210 	bic.w	r2, r3, #16
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800442e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	021b      	lsls	r3, r3, #8
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	4313      	orrs	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f023 0320 	bic.w	r3, r3, #32
 8004442:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a22      	ldr	r2, [pc, #136]	; (80044dc <TIM_OC2_SetConfig+0xe4>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d003      	beq.n	8004460 <TIM_OC2_SetConfig+0x68>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a21      	ldr	r2, [pc, #132]	; (80044e0 <TIM_OC2_SetConfig+0xe8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d10d      	bne.n	800447c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	4313      	orrs	r3, r2
 8004472:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800447a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a17      	ldr	r2, [pc, #92]	; (80044dc <TIM_OC2_SetConfig+0xe4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d003      	beq.n	800448c <TIM_OC2_SetConfig+0x94>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a16      	ldr	r2, [pc, #88]	; (80044e0 <TIM_OC2_SetConfig+0xe8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d113      	bne.n	80044b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004492:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800449a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	621a      	str	r2, [r3, #32]
}
 80044ce:	bf00      	nop
 80044d0:	371c      	adds	r7, #28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40010000 	.word	0x40010000
 80044e0:	40010400 	.word	0x40010400

080044e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b087      	sub	sp, #28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 0303 	bic.w	r3, r3, #3
 800451a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	4313      	orrs	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800452c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	021b      	lsls	r3, r3, #8
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	4313      	orrs	r3, r2
 8004538:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a21      	ldr	r2, [pc, #132]	; (80045c4 <TIM_OC3_SetConfig+0xe0>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d003      	beq.n	800454a <TIM_OC3_SetConfig+0x66>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a20      	ldr	r2, [pc, #128]	; (80045c8 <TIM_OC3_SetConfig+0xe4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d10d      	bne.n	8004566 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004550:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	021b      	lsls	r3, r3, #8
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	4313      	orrs	r3, r2
 800455c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004564:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a16      	ldr	r2, [pc, #88]	; (80045c4 <TIM_OC3_SetConfig+0xe0>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d003      	beq.n	8004576 <TIM_OC3_SetConfig+0x92>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a15      	ldr	r2, [pc, #84]	; (80045c8 <TIM_OC3_SetConfig+0xe4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d113      	bne.n	800459e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800457c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004584:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	4313      	orrs	r3, r2
 8004590:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	621a      	str	r2, [r3, #32]
}
 80045b8:	bf00      	nop
 80045ba:	371c      	adds	r7, #28
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	40010000 	.word	0x40010000
 80045c8:	40010400 	.word	0x40010400

080045cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	021b      	lsls	r3, r3, #8
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	4313      	orrs	r3, r2
 800460e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004616:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	031b      	lsls	r3, r3, #12
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	4313      	orrs	r3, r2
 8004622:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a12      	ldr	r2, [pc, #72]	; (8004670 <TIM_OC4_SetConfig+0xa4>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d003      	beq.n	8004634 <TIM_OC4_SetConfig+0x68>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a11      	ldr	r2, [pc, #68]	; (8004674 <TIM_OC4_SetConfig+0xa8>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d109      	bne.n	8004648 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800463a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	019b      	lsls	r3, r3, #6
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	4313      	orrs	r3, r2
 8004646:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	621a      	str	r2, [r3, #32]
}
 8004662:	bf00      	nop
 8004664:	371c      	adds	r7, #28
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	40010000 	.word	0x40010000
 8004674:	40010400 	.word	0x40010400

08004678 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	f023 0201 	bic.w	r2, r3, #1
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	011b      	lsls	r3, r3, #4
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f023 030a 	bic.w	r3, r3, #10
 80046b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	621a      	str	r2, [r3, #32]
}
 80046ca:	bf00      	nop
 80046cc:	371c      	adds	r7, #28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b087      	sub	sp, #28
 80046da:	af00      	add	r7, sp, #0
 80046dc:	60f8      	str	r0, [r7, #12]
 80046de:	60b9      	str	r1, [r7, #8]
 80046e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	f023 0210 	bic.w	r2, r3, #16
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004700:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	031b      	lsls	r3, r3, #12
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	4313      	orrs	r3, r2
 800470a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004712:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	011b      	lsls	r3, r3, #4
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4313      	orrs	r3, r2
 800471c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	621a      	str	r2, [r3, #32]
}
 800472a:	bf00      	nop
 800472c:	371c      	adds	r7, #28
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004736:	b480      	push	{r7}
 8004738:	b085      	sub	sp, #20
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
 800473e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4313      	orrs	r3, r2
 8004754:	f043 0307 	orr.w	r3, r3, #7
 8004758:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	609a      	str	r2, [r3, #8]
}
 8004760:	bf00      	nop
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800476c:	b480      	push	{r7}
 800476e:	b087      	sub	sp, #28
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
 8004778:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004786:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	021a      	lsls	r2, r3, #8
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	431a      	orrs	r2, r3
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	4313      	orrs	r3, r2
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	4313      	orrs	r3, r2
 8004798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	609a      	str	r2, [r3, #8]
}
 80047a0:	bf00      	nop
 80047a2:	371c      	adds	r7, #28
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f003 031f 	and.w	r3, r3, #31
 80047be:	2201      	movs	r2, #1
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a1a      	ldr	r2, [r3, #32]
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	43db      	mvns	r3, r3
 80047ce:	401a      	ands	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a1a      	ldr	r2, [r3, #32]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	f003 031f 	and.w	r3, r3, #31
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	fa01 f303 	lsl.w	r3, r1, r3
 80047e4:	431a      	orrs	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	621a      	str	r2, [r3, #32]
}
 80047ea:	bf00      	nop
 80047ec:	371c      	adds	r7, #28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
	...

080047f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004808:	2b01      	cmp	r3, #1
 800480a:	d101      	bne.n	8004810 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800480c:	2302      	movs	r3, #2
 800480e:	e05a      	b.n	80048c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004836:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a21      	ldr	r2, [pc, #132]	; (80048d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d022      	beq.n	800489a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800485c:	d01d      	beq.n	800489a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a1d      	ldr	r2, [pc, #116]	; (80048d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d018      	beq.n	800489a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a1b      	ldr	r2, [pc, #108]	; (80048dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d013      	beq.n	800489a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a1a      	ldr	r2, [pc, #104]	; (80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d00e      	beq.n	800489a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a18      	ldr	r2, [pc, #96]	; (80048e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d009      	beq.n	800489a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a17      	ldr	r2, [pc, #92]	; (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d004      	beq.n	800489a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a15      	ldr	r2, [pc, #84]	; (80048ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d10c      	bne.n	80048b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	40010000 	.word	0x40010000
 80048d8:	40000400 	.word	0x40000400
 80048dc:	40000800 	.word	0x40000800
 80048e0:	40000c00 	.word	0x40000c00
 80048e4:	40010400 	.word	0x40010400
 80048e8:	40014000 	.word	0x40014000
 80048ec:	40001800 	.word	0x40001800

080048f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004904:	2b01      	cmp	r3, #1
 8004906:	d101      	bne.n	800490c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004908:	2302      	movs	r3, #2
 800490a:	e03d      	b.n	8004988 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	4313      	orrs	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	4313      	orrs	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4313      	orrs	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	4313      	orrs	r3, r2
 8004966:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	4313      	orrs	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <__errno>:
 80049bc:	4b01      	ldr	r3, [pc, #4]	; (80049c4 <__errno+0x8>)
 80049be:	6818      	ldr	r0, [r3, #0]
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	2000000c 	.word	0x2000000c

080049c8 <__libc_init_array>:
 80049c8:	b570      	push	{r4, r5, r6, lr}
 80049ca:	4d0d      	ldr	r5, [pc, #52]	; (8004a00 <__libc_init_array+0x38>)
 80049cc:	4c0d      	ldr	r4, [pc, #52]	; (8004a04 <__libc_init_array+0x3c>)
 80049ce:	1b64      	subs	r4, r4, r5
 80049d0:	10a4      	asrs	r4, r4, #2
 80049d2:	2600      	movs	r6, #0
 80049d4:	42a6      	cmp	r6, r4
 80049d6:	d109      	bne.n	80049ec <__libc_init_array+0x24>
 80049d8:	4d0b      	ldr	r5, [pc, #44]	; (8004a08 <__libc_init_array+0x40>)
 80049da:	4c0c      	ldr	r4, [pc, #48]	; (8004a0c <__libc_init_array+0x44>)
 80049dc:	f000 fc8e 	bl	80052fc <_init>
 80049e0:	1b64      	subs	r4, r4, r5
 80049e2:	10a4      	asrs	r4, r4, #2
 80049e4:	2600      	movs	r6, #0
 80049e6:	42a6      	cmp	r6, r4
 80049e8:	d105      	bne.n	80049f6 <__libc_init_array+0x2e>
 80049ea:	bd70      	pop	{r4, r5, r6, pc}
 80049ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80049f0:	4798      	blx	r3
 80049f2:	3601      	adds	r6, #1
 80049f4:	e7ee      	b.n	80049d4 <__libc_init_array+0xc>
 80049f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049fa:	4798      	blx	r3
 80049fc:	3601      	adds	r6, #1
 80049fe:	e7f2      	b.n	80049e6 <__libc_init_array+0x1e>
 8004a00:	08005384 	.word	0x08005384
 8004a04:	08005384 	.word	0x08005384
 8004a08:	08005384 	.word	0x08005384
 8004a0c:	08005388 	.word	0x08005388

08004a10 <memset>:
 8004a10:	4402      	add	r2, r0
 8004a12:	4603      	mov	r3, r0
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d100      	bne.n	8004a1a <memset+0xa>
 8004a18:	4770      	bx	lr
 8004a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a1e:	e7f9      	b.n	8004a14 <memset+0x4>

08004a20 <siprintf>:
 8004a20:	b40e      	push	{r1, r2, r3}
 8004a22:	b500      	push	{lr}
 8004a24:	b09c      	sub	sp, #112	; 0x70
 8004a26:	ab1d      	add	r3, sp, #116	; 0x74
 8004a28:	9002      	str	r0, [sp, #8]
 8004a2a:	9006      	str	r0, [sp, #24]
 8004a2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a30:	4809      	ldr	r0, [pc, #36]	; (8004a58 <siprintf+0x38>)
 8004a32:	9107      	str	r1, [sp, #28]
 8004a34:	9104      	str	r1, [sp, #16]
 8004a36:	4909      	ldr	r1, [pc, #36]	; (8004a5c <siprintf+0x3c>)
 8004a38:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a3c:	9105      	str	r1, [sp, #20]
 8004a3e:	6800      	ldr	r0, [r0, #0]
 8004a40:	9301      	str	r3, [sp, #4]
 8004a42:	a902      	add	r1, sp, #8
 8004a44:	f000 f868 	bl	8004b18 <_svfiprintf_r>
 8004a48:	9b02      	ldr	r3, [sp, #8]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	701a      	strb	r2, [r3, #0]
 8004a4e:	b01c      	add	sp, #112	; 0x70
 8004a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a54:	b003      	add	sp, #12
 8004a56:	4770      	bx	lr
 8004a58:	2000000c 	.word	0x2000000c
 8004a5c:	ffff0208 	.word	0xffff0208

08004a60 <__ssputs_r>:
 8004a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a64:	688e      	ldr	r6, [r1, #8]
 8004a66:	429e      	cmp	r6, r3
 8004a68:	4682      	mov	sl, r0
 8004a6a:	460c      	mov	r4, r1
 8004a6c:	4690      	mov	r8, r2
 8004a6e:	461f      	mov	r7, r3
 8004a70:	d838      	bhi.n	8004ae4 <__ssputs_r+0x84>
 8004a72:	898a      	ldrh	r2, [r1, #12]
 8004a74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a78:	d032      	beq.n	8004ae0 <__ssputs_r+0x80>
 8004a7a:	6825      	ldr	r5, [r4, #0]
 8004a7c:	6909      	ldr	r1, [r1, #16]
 8004a7e:	eba5 0901 	sub.w	r9, r5, r1
 8004a82:	6965      	ldr	r5, [r4, #20]
 8004a84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	444b      	add	r3, r9
 8004a90:	106d      	asrs	r5, r5, #1
 8004a92:	429d      	cmp	r5, r3
 8004a94:	bf38      	it	cc
 8004a96:	461d      	movcc	r5, r3
 8004a98:	0553      	lsls	r3, r2, #21
 8004a9a:	d531      	bpl.n	8004b00 <__ssputs_r+0xa0>
 8004a9c:	4629      	mov	r1, r5
 8004a9e:	f000 fb63 	bl	8005168 <_malloc_r>
 8004aa2:	4606      	mov	r6, r0
 8004aa4:	b950      	cbnz	r0, 8004abc <__ssputs_r+0x5c>
 8004aa6:	230c      	movs	r3, #12
 8004aa8:	f8ca 3000 	str.w	r3, [sl]
 8004aac:	89a3      	ldrh	r3, [r4, #12]
 8004aae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ab2:	81a3      	strh	r3, [r4, #12]
 8004ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004abc:	6921      	ldr	r1, [r4, #16]
 8004abe:	464a      	mov	r2, r9
 8004ac0:	f000 fabe 	bl	8005040 <memcpy>
 8004ac4:	89a3      	ldrh	r3, [r4, #12]
 8004ac6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ace:	81a3      	strh	r3, [r4, #12]
 8004ad0:	6126      	str	r6, [r4, #16]
 8004ad2:	6165      	str	r5, [r4, #20]
 8004ad4:	444e      	add	r6, r9
 8004ad6:	eba5 0509 	sub.w	r5, r5, r9
 8004ada:	6026      	str	r6, [r4, #0]
 8004adc:	60a5      	str	r5, [r4, #8]
 8004ade:	463e      	mov	r6, r7
 8004ae0:	42be      	cmp	r6, r7
 8004ae2:	d900      	bls.n	8004ae6 <__ssputs_r+0x86>
 8004ae4:	463e      	mov	r6, r7
 8004ae6:	6820      	ldr	r0, [r4, #0]
 8004ae8:	4632      	mov	r2, r6
 8004aea:	4641      	mov	r1, r8
 8004aec:	f000 fab6 	bl	800505c <memmove>
 8004af0:	68a3      	ldr	r3, [r4, #8]
 8004af2:	1b9b      	subs	r3, r3, r6
 8004af4:	60a3      	str	r3, [r4, #8]
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	4433      	add	r3, r6
 8004afa:	6023      	str	r3, [r4, #0]
 8004afc:	2000      	movs	r0, #0
 8004afe:	e7db      	b.n	8004ab8 <__ssputs_r+0x58>
 8004b00:	462a      	mov	r2, r5
 8004b02:	f000 fba5 	bl	8005250 <_realloc_r>
 8004b06:	4606      	mov	r6, r0
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	d1e1      	bne.n	8004ad0 <__ssputs_r+0x70>
 8004b0c:	6921      	ldr	r1, [r4, #16]
 8004b0e:	4650      	mov	r0, sl
 8004b10:	f000 fabe 	bl	8005090 <_free_r>
 8004b14:	e7c7      	b.n	8004aa6 <__ssputs_r+0x46>
	...

08004b18 <_svfiprintf_r>:
 8004b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b1c:	4698      	mov	r8, r3
 8004b1e:	898b      	ldrh	r3, [r1, #12]
 8004b20:	061b      	lsls	r3, r3, #24
 8004b22:	b09d      	sub	sp, #116	; 0x74
 8004b24:	4607      	mov	r7, r0
 8004b26:	460d      	mov	r5, r1
 8004b28:	4614      	mov	r4, r2
 8004b2a:	d50e      	bpl.n	8004b4a <_svfiprintf_r+0x32>
 8004b2c:	690b      	ldr	r3, [r1, #16]
 8004b2e:	b963      	cbnz	r3, 8004b4a <_svfiprintf_r+0x32>
 8004b30:	2140      	movs	r1, #64	; 0x40
 8004b32:	f000 fb19 	bl	8005168 <_malloc_r>
 8004b36:	6028      	str	r0, [r5, #0]
 8004b38:	6128      	str	r0, [r5, #16]
 8004b3a:	b920      	cbnz	r0, 8004b46 <_svfiprintf_r+0x2e>
 8004b3c:	230c      	movs	r3, #12
 8004b3e:	603b      	str	r3, [r7, #0]
 8004b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b44:	e0d1      	b.n	8004cea <_svfiprintf_r+0x1d2>
 8004b46:	2340      	movs	r3, #64	; 0x40
 8004b48:	616b      	str	r3, [r5, #20]
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	9309      	str	r3, [sp, #36]	; 0x24
 8004b4e:	2320      	movs	r3, #32
 8004b50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b54:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b58:	2330      	movs	r3, #48	; 0x30
 8004b5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004d04 <_svfiprintf_r+0x1ec>
 8004b5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b62:	f04f 0901 	mov.w	r9, #1
 8004b66:	4623      	mov	r3, r4
 8004b68:	469a      	mov	sl, r3
 8004b6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b6e:	b10a      	cbz	r2, 8004b74 <_svfiprintf_r+0x5c>
 8004b70:	2a25      	cmp	r2, #37	; 0x25
 8004b72:	d1f9      	bne.n	8004b68 <_svfiprintf_r+0x50>
 8004b74:	ebba 0b04 	subs.w	fp, sl, r4
 8004b78:	d00b      	beq.n	8004b92 <_svfiprintf_r+0x7a>
 8004b7a:	465b      	mov	r3, fp
 8004b7c:	4622      	mov	r2, r4
 8004b7e:	4629      	mov	r1, r5
 8004b80:	4638      	mov	r0, r7
 8004b82:	f7ff ff6d 	bl	8004a60 <__ssputs_r>
 8004b86:	3001      	adds	r0, #1
 8004b88:	f000 80aa 	beq.w	8004ce0 <_svfiprintf_r+0x1c8>
 8004b8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b8e:	445a      	add	r2, fp
 8004b90:	9209      	str	r2, [sp, #36]	; 0x24
 8004b92:	f89a 3000 	ldrb.w	r3, [sl]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f000 80a2 	beq.w	8004ce0 <_svfiprintf_r+0x1c8>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ba2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ba6:	f10a 0a01 	add.w	sl, sl, #1
 8004baa:	9304      	str	r3, [sp, #16]
 8004bac:	9307      	str	r3, [sp, #28]
 8004bae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bb2:	931a      	str	r3, [sp, #104]	; 0x68
 8004bb4:	4654      	mov	r4, sl
 8004bb6:	2205      	movs	r2, #5
 8004bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bbc:	4851      	ldr	r0, [pc, #324]	; (8004d04 <_svfiprintf_r+0x1ec>)
 8004bbe:	f7fb fb07 	bl	80001d0 <memchr>
 8004bc2:	9a04      	ldr	r2, [sp, #16]
 8004bc4:	b9d8      	cbnz	r0, 8004bfe <_svfiprintf_r+0xe6>
 8004bc6:	06d0      	lsls	r0, r2, #27
 8004bc8:	bf44      	itt	mi
 8004bca:	2320      	movmi	r3, #32
 8004bcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bd0:	0711      	lsls	r1, r2, #28
 8004bd2:	bf44      	itt	mi
 8004bd4:	232b      	movmi	r3, #43	; 0x2b
 8004bd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bda:	f89a 3000 	ldrb.w	r3, [sl]
 8004bde:	2b2a      	cmp	r3, #42	; 0x2a
 8004be0:	d015      	beq.n	8004c0e <_svfiprintf_r+0xf6>
 8004be2:	9a07      	ldr	r2, [sp, #28]
 8004be4:	4654      	mov	r4, sl
 8004be6:	2000      	movs	r0, #0
 8004be8:	f04f 0c0a 	mov.w	ip, #10
 8004bec:	4621      	mov	r1, r4
 8004bee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bf2:	3b30      	subs	r3, #48	; 0x30
 8004bf4:	2b09      	cmp	r3, #9
 8004bf6:	d94e      	bls.n	8004c96 <_svfiprintf_r+0x17e>
 8004bf8:	b1b0      	cbz	r0, 8004c28 <_svfiprintf_r+0x110>
 8004bfa:	9207      	str	r2, [sp, #28]
 8004bfc:	e014      	b.n	8004c28 <_svfiprintf_r+0x110>
 8004bfe:	eba0 0308 	sub.w	r3, r0, r8
 8004c02:	fa09 f303 	lsl.w	r3, r9, r3
 8004c06:	4313      	orrs	r3, r2
 8004c08:	9304      	str	r3, [sp, #16]
 8004c0a:	46a2      	mov	sl, r4
 8004c0c:	e7d2      	b.n	8004bb4 <_svfiprintf_r+0x9c>
 8004c0e:	9b03      	ldr	r3, [sp, #12]
 8004c10:	1d19      	adds	r1, r3, #4
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	9103      	str	r1, [sp, #12]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	bfbb      	ittet	lt
 8004c1a:	425b      	neglt	r3, r3
 8004c1c:	f042 0202 	orrlt.w	r2, r2, #2
 8004c20:	9307      	strge	r3, [sp, #28]
 8004c22:	9307      	strlt	r3, [sp, #28]
 8004c24:	bfb8      	it	lt
 8004c26:	9204      	strlt	r2, [sp, #16]
 8004c28:	7823      	ldrb	r3, [r4, #0]
 8004c2a:	2b2e      	cmp	r3, #46	; 0x2e
 8004c2c:	d10c      	bne.n	8004c48 <_svfiprintf_r+0x130>
 8004c2e:	7863      	ldrb	r3, [r4, #1]
 8004c30:	2b2a      	cmp	r3, #42	; 0x2a
 8004c32:	d135      	bne.n	8004ca0 <_svfiprintf_r+0x188>
 8004c34:	9b03      	ldr	r3, [sp, #12]
 8004c36:	1d1a      	adds	r2, r3, #4
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	9203      	str	r2, [sp, #12]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	bfb8      	it	lt
 8004c40:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004c44:	3402      	adds	r4, #2
 8004c46:	9305      	str	r3, [sp, #20]
 8004c48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d14 <_svfiprintf_r+0x1fc>
 8004c4c:	7821      	ldrb	r1, [r4, #0]
 8004c4e:	2203      	movs	r2, #3
 8004c50:	4650      	mov	r0, sl
 8004c52:	f7fb fabd 	bl	80001d0 <memchr>
 8004c56:	b140      	cbz	r0, 8004c6a <_svfiprintf_r+0x152>
 8004c58:	2340      	movs	r3, #64	; 0x40
 8004c5a:	eba0 000a 	sub.w	r0, r0, sl
 8004c5e:	fa03 f000 	lsl.w	r0, r3, r0
 8004c62:	9b04      	ldr	r3, [sp, #16]
 8004c64:	4303      	orrs	r3, r0
 8004c66:	3401      	adds	r4, #1
 8004c68:	9304      	str	r3, [sp, #16]
 8004c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c6e:	4826      	ldr	r0, [pc, #152]	; (8004d08 <_svfiprintf_r+0x1f0>)
 8004c70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c74:	2206      	movs	r2, #6
 8004c76:	f7fb faab 	bl	80001d0 <memchr>
 8004c7a:	2800      	cmp	r0, #0
 8004c7c:	d038      	beq.n	8004cf0 <_svfiprintf_r+0x1d8>
 8004c7e:	4b23      	ldr	r3, [pc, #140]	; (8004d0c <_svfiprintf_r+0x1f4>)
 8004c80:	bb1b      	cbnz	r3, 8004cca <_svfiprintf_r+0x1b2>
 8004c82:	9b03      	ldr	r3, [sp, #12]
 8004c84:	3307      	adds	r3, #7
 8004c86:	f023 0307 	bic.w	r3, r3, #7
 8004c8a:	3308      	adds	r3, #8
 8004c8c:	9303      	str	r3, [sp, #12]
 8004c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c90:	4433      	add	r3, r6
 8004c92:	9309      	str	r3, [sp, #36]	; 0x24
 8004c94:	e767      	b.n	8004b66 <_svfiprintf_r+0x4e>
 8004c96:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c9a:	460c      	mov	r4, r1
 8004c9c:	2001      	movs	r0, #1
 8004c9e:	e7a5      	b.n	8004bec <_svfiprintf_r+0xd4>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	3401      	adds	r4, #1
 8004ca4:	9305      	str	r3, [sp, #20]
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	f04f 0c0a 	mov.w	ip, #10
 8004cac:	4620      	mov	r0, r4
 8004cae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cb2:	3a30      	subs	r2, #48	; 0x30
 8004cb4:	2a09      	cmp	r2, #9
 8004cb6:	d903      	bls.n	8004cc0 <_svfiprintf_r+0x1a8>
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0c5      	beq.n	8004c48 <_svfiprintf_r+0x130>
 8004cbc:	9105      	str	r1, [sp, #20]
 8004cbe:	e7c3      	b.n	8004c48 <_svfiprintf_r+0x130>
 8004cc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cc4:	4604      	mov	r4, r0
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e7f0      	b.n	8004cac <_svfiprintf_r+0x194>
 8004cca:	ab03      	add	r3, sp, #12
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	462a      	mov	r2, r5
 8004cd0:	4b0f      	ldr	r3, [pc, #60]	; (8004d10 <_svfiprintf_r+0x1f8>)
 8004cd2:	a904      	add	r1, sp, #16
 8004cd4:	4638      	mov	r0, r7
 8004cd6:	f3af 8000 	nop.w
 8004cda:	1c42      	adds	r2, r0, #1
 8004cdc:	4606      	mov	r6, r0
 8004cde:	d1d6      	bne.n	8004c8e <_svfiprintf_r+0x176>
 8004ce0:	89ab      	ldrh	r3, [r5, #12]
 8004ce2:	065b      	lsls	r3, r3, #25
 8004ce4:	f53f af2c 	bmi.w	8004b40 <_svfiprintf_r+0x28>
 8004ce8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cea:	b01d      	add	sp, #116	; 0x74
 8004cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cf0:	ab03      	add	r3, sp, #12
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	462a      	mov	r2, r5
 8004cf6:	4b06      	ldr	r3, [pc, #24]	; (8004d10 <_svfiprintf_r+0x1f8>)
 8004cf8:	a904      	add	r1, sp, #16
 8004cfa:	4638      	mov	r0, r7
 8004cfc:	f000 f87a 	bl	8004df4 <_printf_i>
 8004d00:	e7eb      	b.n	8004cda <_svfiprintf_r+0x1c2>
 8004d02:	bf00      	nop
 8004d04:	08005348 	.word	0x08005348
 8004d08:	08005352 	.word	0x08005352
 8004d0c:	00000000 	.word	0x00000000
 8004d10:	08004a61 	.word	0x08004a61
 8004d14:	0800534e 	.word	0x0800534e

08004d18 <_printf_common>:
 8004d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d1c:	4616      	mov	r6, r2
 8004d1e:	4699      	mov	r9, r3
 8004d20:	688a      	ldr	r2, [r1, #8]
 8004d22:	690b      	ldr	r3, [r1, #16]
 8004d24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	bfb8      	it	lt
 8004d2c:	4613      	movlt	r3, r2
 8004d2e:	6033      	str	r3, [r6, #0]
 8004d30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d34:	4607      	mov	r7, r0
 8004d36:	460c      	mov	r4, r1
 8004d38:	b10a      	cbz	r2, 8004d3e <_printf_common+0x26>
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	6033      	str	r3, [r6, #0]
 8004d3e:	6823      	ldr	r3, [r4, #0]
 8004d40:	0699      	lsls	r1, r3, #26
 8004d42:	bf42      	ittt	mi
 8004d44:	6833      	ldrmi	r3, [r6, #0]
 8004d46:	3302      	addmi	r3, #2
 8004d48:	6033      	strmi	r3, [r6, #0]
 8004d4a:	6825      	ldr	r5, [r4, #0]
 8004d4c:	f015 0506 	ands.w	r5, r5, #6
 8004d50:	d106      	bne.n	8004d60 <_printf_common+0x48>
 8004d52:	f104 0a19 	add.w	sl, r4, #25
 8004d56:	68e3      	ldr	r3, [r4, #12]
 8004d58:	6832      	ldr	r2, [r6, #0]
 8004d5a:	1a9b      	subs	r3, r3, r2
 8004d5c:	42ab      	cmp	r3, r5
 8004d5e:	dc26      	bgt.n	8004dae <_printf_common+0x96>
 8004d60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d64:	1e13      	subs	r3, r2, #0
 8004d66:	6822      	ldr	r2, [r4, #0]
 8004d68:	bf18      	it	ne
 8004d6a:	2301      	movne	r3, #1
 8004d6c:	0692      	lsls	r2, r2, #26
 8004d6e:	d42b      	bmi.n	8004dc8 <_printf_common+0xb0>
 8004d70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d74:	4649      	mov	r1, r9
 8004d76:	4638      	mov	r0, r7
 8004d78:	47c0      	blx	r8
 8004d7a:	3001      	adds	r0, #1
 8004d7c:	d01e      	beq.n	8004dbc <_printf_common+0xa4>
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	68e5      	ldr	r5, [r4, #12]
 8004d82:	6832      	ldr	r2, [r6, #0]
 8004d84:	f003 0306 	and.w	r3, r3, #6
 8004d88:	2b04      	cmp	r3, #4
 8004d8a:	bf08      	it	eq
 8004d8c:	1aad      	subeq	r5, r5, r2
 8004d8e:	68a3      	ldr	r3, [r4, #8]
 8004d90:	6922      	ldr	r2, [r4, #16]
 8004d92:	bf0c      	ite	eq
 8004d94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d98:	2500      	movne	r5, #0
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	bfc4      	itt	gt
 8004d9e:	1a9b      	subgt	r3, r3, r2
 8004da0:	18ed      	addgt	r5, r5, r3
 8004da2:	2600      	movs	r6, #0
 8004da4:	341a      	adds	r4, #26
 8004da6:	42b5      	cmp	r5, r6
 8004da8:	d11a      	bne.n	8004de0 <_printf_common+0xc8>
 8004daa:	2000      	movs	r0, #0
 8004dac:	e008      	b.n	8004dc0 <_printf_common+0xa8>
 8004dae:	2301      	movs	r3, #1
 8004db0:	4652      	mov	r2, sl
 8004db2:	4649      	mov	r1, r9
 8004db4:	4638      	mov	r0, r7
 8004db6:	47c0      	blx	r8
 8004db8:	3001      	adds	r0, #1
 8004dba:	d103      	bne.n	8004dc4 <_printf_common+0xac>
 8004dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc4:	3501      	adds	r5, #1
 8004dc6:	e7c6      	b.n	8004d56 <_printf_common+0x3e>
 8004dc8:	18e1      	adds	r1, r4, r3
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	2030      	movs	r0, #48	; 0x30
 8004dce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dd2:	4422      	add	r2, r4
 8004dd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ddc:	3302      	adds	r3, #2
 8004dde:	e7c7      	b.n	8004d70 <_printf_common+0x58>
 8004de0:	2301      	movs	r3, #1
 8004de2:	4622      	mov	r2, r4
 8004de4:	4649      	mov	r1, r9
 8004de6:	4638      	mov	r0, r7
 8004de8:	47c0      	blx	r8
 8004dea:	3001      	adds	r0, #1
 8004dec:	d0e6      	beq.n	8004dbc <_printf_common+0xa4>
 8004dee:	3601      	adds	r6, #1
 8004df0:	e7d9      	b.n	8004da6 <_printf_common+0x8e>
	...

08004df4 <_printf_i>:
 8004df4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004df8:	7e0f      	ldrb	r7, [r1, #24]
 8004dfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004dfc:	2f78      	cmp	r7, #120	; 0x78
 8004dfe:	4691      	mov	r9, r2
 8004e00:	4680      	mov	r8, r0
 8004e02:	460c      	mov	r4, r1
 8004e04:	469a      	mov	sl, r3
 8004e06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e0a:	d807      	bhi.n	8004e1c <_printf_i+0x28>
 8004e0c:	2f62      	cmp	r7, #98	; 0x62
 8004e0e:	d80a      	bhi.n	8004e26 <_printf_i+0x32>
 8004e10:	2f00      	cmp	r7, #0
 8004e12:	f000 80d8 	beq.w	8004fc6 <_printf_i+0x1d2>
 8004e16:	2f58      	cmp	r7, #88	; 0x58
 8004e18:	f000 80a3 	beq.w	8004f62 <_printf_i+0x16e>
 8004e1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e24:	e03a      	b.n	8004e9c <_printf_i+0xa8>
 8004e26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e2a:	2b15      	cmp	r3, #21
 8004e2c:	d8f6      	bhi.n	8004e1c <_printf_i+0x28>
 8004e2e:	a101      	add	r1, pc, #4	; (adr r1, 8004e34 <_printf_i+0x40>)
 8004e30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e34:	08004e8d 	.word	0x08004e8d
 8004e38:	08004ea1 	.word	0x08004ea1
 8004e3c:	08004e1d 	.word	0x08004e1d
 8004e40:	08004e1d 	.word	0x08004e1d
 8004e44:	08004e1d 	.word	0x08004e1d
 8004e48:	08004e1d 	.word	0x08004e1d
 8004e4c:	08004ea1 	.word	0x08004ea1
 8004e50:	08004e1d 	.word	0x08004e1d
 8004e54:	08004e1d 	.word	0x08004e1d
 8004e58:	08004e1d 	.word	0x08004e1d
 8004e5c:	08004e1d 	.word	0x08004e1d
 8004e60:	08004fad 	.word	0x08004fad
 8004e64:	08004ed1 	.word	0x08004ed1
 8004e68:	08004f8f 	.word	0x08004f8f
 8004e6c:	08004e1d 	.word	0x08004e1d
 8004e70:	08004e1d 	.word	0x08004e1d
 8004e74:	08004fcf 	.word	0x08004fcf
 8004e78:	08004e1d 	.word	0x08004e1d
 8004e7c:	08004ed1 	.word	0x08004ed1
 8004e80:	08004e1d 	.word	0x08004e1d
 8004e84:	08004e1d 	.word	0x08004e1d
 8004e88:	08004f97 	.word	0x08004f97
 8004e8c:	682b      	ldr	r3, [r5, #0]
 8004e8e:	1d1a      	adds	r2, r3, #4
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	602a      	str	r2, [r5, #0]
 8004e94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e0a3      	b.n	8004fe8 <_printf_i+0x1f4>
 8004ea0:	6820      	ldr	r0, [r4, #0]
 8004ea2:	6829      	ldr	r1, [r5, #0]
 8004ea4:	0606      	lsls	r6, r0, #24
 8004ea6:	f101 0304 	add.w	r3, r1, #4
 8004eaa:	d50a      	bpl.n	8004ec2 <_printf_i+0xce>
 8004eac:	680e      	ldr	r6, [r1, #0]
 8004eae:	602b      	str	r3, [r5, #0]
 8004eb0:	2e00      	cmp	r6, #0
 8004eb2:	da03      	bge.n	8004ebc <_printf_i+0xc8>
 8004eb4:	232d      	movs	r3, #45	; 0x2d
 8004eb6:	4276      	negs	r6, r6
 8004eb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ebc:	485e      	ldr	r0, [pc, #376]	; (8005038 <_printf_i+0x244>)
 8004ebe:	230a      	movs	r3, #10
 8004ec0:	e019      	b.n	8004ef6 <_printf_i+0x102>
 8004ec2:	680e      	ldr	r6, [r1, #0]
 8004ec4:	602b      	str	r3, [r5, #0]
 8004ec6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004eca:	bf18      	it	ne
 8004ecc:	b236      	sxthne	r6, r6
 8004ece:	e7ef      	b.n	8004eb0 <_printf_i+0xbc>
 8004ed0:	682b      	ldr	r3, [r5, #0]
 8004ed2:	6820      	ldr	r0, [r4, #0]
 8004ed4:	1d19      	adds	r1, r3, #4
 8004ed6:	6029      	str	r1, [r5, #0]
 8004ed8:	0601      	lsls	r1, r0, #24
 8004eda:	d501      	bpl.n	8004ee0 <_printf_i+0xec>
 8004edc:	681e      	ldr	r6, [r3, #0]
 8004ede:	e002      	b.n	8004ee6 <_printf_i+0xf2>
 8004ee0:	0646      	lsls	r6, r0, #25
 8004ee2:	d5fb      	bpl.n	8004edc <_printf_i+0xe8>
 8004ee4:	881e      	ldrh	r6, [r3, #0]
 8004ee6:	4854      	ldr	r0, [pc, #336]	; (8005038 <_printf_i+0x244>)
 8004ee8:	2f6f      	cmp	r7, #111	; 0x6f
 8004eea:	bf0c      	ite	eq
 8004eec:	2308      	moveq	r3, #8
 8004eee:	230a      	movne	r3, #10
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ef6:	6865      	ldr	r5, [r4, #4]
 8004ef8:	60a5      	str	r5, [r4, #8]
 8004efa:	2d00      	cmp	r5, #0
 8004efc:	bfa2      	ittt	ge
 8004efe:	6821      	ldrge	r1, [r4, #0]
 8004f00:	f021 0104 	bicge.w	r1, r1, #4
 8004f04:	6021      	strge	r1, [r4, #0]
 8004f06:	b90e      	cbnz	r6, 8004f0c <_printf_i+0x118>
 8004f08:	2d00      	cmp	r5, #0
 8004f0a:	d04d      	beq.n	8004fa8 <_printf_i+0x1b4>
 8004f0c:	4615      	mov	r5, r2
 8004f0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f12:	fb03 6711 	mls	r7, r3, r1, r6
 8004f16:	5dc7      	ldrb	r7, [r0, r7]
 8004f18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f1c:	4637      	mov	r7, r6
 8004f1e:	42bb      	cmp	r3, r7
 8004f20:	460e      	mov	r6, r1
 8004f22:	d9f4      	bls.n	8004f0e <_printf_i+0x11a>
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d10b      	bne.n	8004f40 <_printf_i+0x14c>
 8004f28:	6823      	ldr	r3, [r4, #0]
 8004f2a:	07de      	lsls	r6, r3, #31
 8004f2c:	d508      	bpl.n	8004f40 <_printf_i+0x14c>
 8004f2e:	6923      	ldr	r3, [r4, #16]
 8004f30:	6861      	ldr	r1, [r4, #4]
 8004f32:	4299      	cmp	r1, r3
 8004f34:	bfde      	ittt	le
 8004f36:	2330      	movle	r3, #48	; 0x30
 8004f38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f3c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004f40:	1b52      	subs	r2, r2, r5
 8004f42:	6122      	str	r2, [r4, #16]
 8004f44:	f8cd a000 	str.w	sl, [sp]
 8004f48:	464b      	mov	r3, r9
 8004f4a:	aa03      	add	r2, sp, #12
 8004f4c:	4621      	mov	r1, r4
 8004f4e:	4640      	mov	r0, r8
 8004f50:	f7ff fee2 	bl	8004d18 <_printf_common>
 8004f54:	3001      	adds	r0, #1
 8004f56:	d14c      	bne.n	8004ff2 <_printf_i+0x1fe>
 8004f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f5c:	b004      	add	sp, #16
 8004f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f62:	4835      	ldr	r0, [pc, #212]	; (8005038 <_printf_i+0x244>)
 8004f64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f68:	6829      	ldr	r1, [r5, #0]
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f70:	6029      	str	r1, [r5, #0]
 8004f72:	061d      	lsls	r5, r3, #24
 8004f74:	d514      	bpl.n	8004fa0 <_printf_i+0x1ac>
 8004f76:	07df      	lsls	r7, r3, #31
 8004f78:	bf44      	itt	mi
 8004f7a:	f043 0320 	orrmi.w	r3, r3, #32
 8004f7e:	6023      	strmi	r3, [r4, #0]
 8004f80:	b91e      	cbnz	r6, 8004f8a <_printf_i+0x196>
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	f023 0320 	bic.w	r3, r3, #32
 8004f88:	6023      	str	r3, [r4, #0]
 8004f8a:	2310      	movs	r3, #16
 8004f8c:	e7b0      	b.n	8004ef0 <_printf_i+0xfc>
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	f043 0320 	orr.w	r3, r3, #32
 8004f94:	6023      	str	r3, [r4, #0]
 8004f96:	2378      	movs	r3, #120	; 0x78
 8004f98:	4828      	ldr	r0, [pc, #160]	; (800503c <_printf_i+0x248>)
 8004f9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f9e:	e7e3      	b.n	8004f68 <_printf_i+0x174>
 8004fa0:	0659      	lsls	r1, r3, #25
 8004fa2:	bf48      	it	mi
 8004fa4:	b2b6      	uxthmi	r6, r6
 8004fa6:	e7e6      	b.n	8004f76 <_printf_i+0x182>
 8004fa8:	4615      	mov	r5, r2
 8004faa:	e7bb      	b.n	8004f24 <_printf_i+0x130>
 8004fac:	682b      	ldr	r3, [r5, #0]
 8004fae:	6826      	ldr	r6, [r4, #0]
 8004fb0:	6961      	ldr	r1, [r4, #20]
 8004fb2:	1d18      	adds	r0, r3, #4
 8004fb4:	6028      	str	r0, [r5, #0]
 8004fb6:	0635      	lsls	r5, r6, #24
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	d501      	bpl.n	8004fc0 <_printf_i+0x1cc>
 8004fbc:	6019      	str	r1, [r3, #0]
 8004fbe:	e002      	b.n	8004fc6 <_printf_i+0x1d2>
 8004fc0:	0670      	lsls	r0, r6, #25
 8004fc2:	d5fb      	bpl.n	8004fbc <_printf_i+0x1c8>
 8004fc4:	8019      	strh	r1, [r3, #0]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	6123      	str	r3, [r4, #16]
 8004fca:	4615      	mov	r5, r2
 8004fcc:	e7ba      	b.n	8004f44 <_printf_i+0x150>
 8004fce:	682b      	ldr	r3, [r5, #0]
 8004fd0:	1d1a      	adds	r2, r3, #4
 8004fd2:	602a      	str	r2, [r5, #0]
 8004fd4:	681d      	ldr	r5, [r3, #0]
 8004fd6:	6862      	ldr	r2, [r4, #4]
 8004fd8:	2100      	movs	r1, #0
 8004fda:	4628      	mov	r0, r5
 8004fdc:	f7fb f8f8 	bl	80001d0 <memchr>
 8004fe0:	b108      	cbz	r0, 8004fe6 <_printf_i+0x1f2>
 8004fe2:	1b40      	subs	r0, r0, r5
 8004fe4:	6060      	str	r0, [r4, #4]
 8004fe6:	6863      	ldr	r3, [r4, #4]
 8004fe8:	6123      	str	r3, [r4, #16]
 8004fea:	2300      	movs	r3, #0
 8004fec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ff0:	e7a8      	b.n	8004f44 <_printf_i+0x150>
 8004ff2:	6923      	ldr	r3, [r4, #16]
 8004ff4:	462a      	mov	r2, r5
 8004ff6:	4649      	mov	r1, r9
 8004ff8:	4640      	mov	r0, r8
 8004ffa:	47d0      	blx	sl
 8004ffc:	3001      	adds	r0, #1
 8004ffe:	d0ab      	beq.n	8004f58 <_printf_i+0x164>
 8005000:	6823      	ldr	r3, [r4, #0]
 8005002:	079b      	lsls	r3, r3, #30
 8005004:	d413      	bmi.n	800502e <_printf_i+0x23a>
 8005006:	68e0      	ldr	r0, [r4, #12]
 8005008:	9b03      	ldr	r3, [sp, #12]
 800500a:	4298      	cmp	r0, r3
 800500c:	bfb8      	it	lt
 800500e:	4618      	movlt	r0, r3
 8005010:	e7a4      	b.n	8004f5c <_printf_i+0x168>
 8005012:	2301      	movs	r3, #1
 8005014:	4632      	mov	r2, r6
 8005016:	4649      	mov	r1, r9
 8005018:	4640      	mov	r0, r8
 800501a:	47d0      	blx	sl
 800501c:	3001      	adds	r0, #1
 800501e:	d09b      	beq.n	8004f58 <_printf_i+0x164>
 8005020:	3501      	adds	r5, #1
 8005022:	68e3      	ldr	r3, [r4, #12]
 8005024:	9903      	ldr	r1, [sp, #12]
 8005026:	1a5b      	subs	r3, r3, r1
 8005028:	42ab      	cmp	r3, r5
 800502a:	dcf2      	bgt.n	8005012 <_printf_i+0x21e>
 800502c:	e7eb      	b.n	8005006 <_printf_i+0x212>
 800502e:	2500      	movs	r5, #0
 8005030:	f104 0619 	add.w	r6, r4, #25
 8005034:	e7f5      	b.n	8005022 <_printf_i+0x22e>
 8005036:	bf00      	nop
 8005038:	08005359 	.word	0x08005359
 800503c:	0800536a 	.word	0x0800536a

08005040 <memcpy>:
 8005040:	440a      	add	r2, r1
 8005042:	4291      	cmp	r1, r2
 8005044:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005048:	d100      	bne.n	800504c <memcpy+0xc>
 800504a:	4770      	bx	lr
 800504c:	b510      	push	{r4, lr}
 800504e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005052:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005056:	4291      	cmp	r1, r2
 8005058:	d1f9      	bne.n	800504e <memcpy+0xe>
 800505a:	bd10      	pop	{r4, pc}

0800505c <memmove>:
 800505c:	4288      	cmp	r0, r1
 800505e:	b510      	push	{r4, lr}
 8005060:	eb01 0402 	add.w	r4, r1, r2
 8005064:	d902      	bls.n	800506c <memmove+0x10>
 8005066:	4284      	cmp	r4, r0
 8005068:	4623      	mov	r3, r4
 800506a:	d807      	bhi.n	800507c <memmove+0x20>
 800506c:	1e43      	subs	r3, r0, #1
 800506e:	42a1      	cmp	r1, r4
 8005070:	d008      	beq.n	8005084 <memmove+0x28>
 8005072:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005076:	f803 2f01 	strb.w	r2, [r3, #1]!
 800507a:	e7f8      	b.n	800506e <memmove+0x12>
 800507c:	4402      	add	r2, r0
 800507e:	4601      	mov	r1, r0
 8005080:	428a      	cmp	r2, r1
 8005082:	d100      	bne.n	8005086 <memmove+0x2a>
 8005084:	bd10      	pop	{r4, pc}
 8005086:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800508a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800508e:	e7f7      	b.n	8005080 <memmove+0x24>

08005090 <_free_r>:
 8005090:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005092:	2900      	cmp	r1, #0
 8005094:	d044      	beq.n	8005120 <_free_r+0x90>
 8005096:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800509a:	9001      	str	r0, [sp, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	f1a1 0404 	sub.w	r4, r1, #4
 80050a2:	bfb8      	it	lt
 80050a4:	18e4      	addlt	r4, r4, r3
 80050a6:	f000 f913 	bl	80052d0 <__malloc_lock>
 80050aa:	4a1e      	ldr	r2, [pc, #120]	; (8005124 <_free_r+0x94>)
 80050ac:	9801      	ldr	r0, [sp, #4]
 80050ae:	6813      	ldr	r3, [r2, #0]
 80050b0:	b933      	cbnz	r3, 80050c0 <_free_r+0x30>
 80050b2:	6063      	str	r3, [r4, #4]
 80050b4:	6014      	str	r4, [r2, #0]
 80050b6:	b003      	add	sp, #12
 80050b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050bc:	f000 b90e 	b.w	80052dc <__malloc_unlock>
 80050c0:	42a3      	cmp	r3, r4
 80050c2:	d908      	bls.n	80050d6 <_free_r+0x46>
 80050c4:	6825      	ldr	r5, [r4, #0]
 80050c6:	1961      	adds	r1, r4, r5
 80050c8:	428b      	cmp	r3, r1
 80050ca:	bf01      	itttt	eq
 80050cc:	6819      	ldreq	r1, [r3, #0]
 80050ce:	685b      	ldreq	r3, [r3, #4]
 80050d0:	1949      	addeq	r1, r1, r5
 80050d2:	6021      	streq	r1, [r4, #0]
 80050d4:	e7ed      	b.n	80050b2 <_free_r+0x22>
 80050d6:	461a      	mov	r2, r3
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	b10b      	cbz	r3, 80050e0 <_free_r+0x50>
 80050dc:	42a3      	cmp	r3, r4
 80050de:	d9fa      	bls.n	80050d6 <_free_r+0x46>
 80050e0:	6811      	ldr	r1, [r2, #0]
 80050e2:	1855      	adds	r5, r2, r1
 80050e4:	42a5      	cmp	r5, r4
 80050e6:	d10b      	bne.n	8005100 <_free_r+0x70>
 80050e8:	6824      	ldr	r4, [r4, #0]
 80050ea:	4421      	add	r1, r4
 80050ec:	1854      	adds	r4, r2, r1
 80050ee:	42a3      	cmp	r3, r4
 80050f0:	6011      	str	r1, [r2, #0]
 80050f2:	d1e0      	bne.n	80050b6 <_free_r+0x26>
 80050f4:	681c      	ldr	r4, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	6053      	str	r3, [r2, #4]
 80050fa:	4421      	add	r1, r4
 80050fc:	6011      	str	r1, [r2, #0]
 80050fe:	e7da      	b.n	80050b6 <_free_r+0x26>
 8005100:	d902      	bls.n	8005108 <_free_r+0x78>
 8005102:	230c      	movs	r3, #12
 8005104:	6003      	str	r3, [r0, #0]
 8005106:	e7d6      	b.n	80050b6 <_free_r+0x26>
 8005108:	6825      	ldr	r5, [r4, #0]
 800510a:	1961      	adds	r1, r4, r5
 800510c:	428b      	cmp	r3, r1
 800510e:	bf04      	itt	eq
 8005110:	6819      	ldreq	r1, [r3, #0]
 8005112:	685b      	ldreq	r3, [r3, #4]
 8005114:	6063      	str	r3, [r4, #4]
 8005116:	bf04      	itt	eq
 8005118:	1949      	addeq	r1, r1, r5
 800511a:	6021      	streq	r1, [r4, #0]
 800511c:	6054      	str	r4, [r2, #4]
 800511e:	e7ca      	b.n	80050b6 <_free_r+0x26>
 8005120:	b003      	add	sp, #12
 8005122:	bd30      	pop	{r4, r5, pc}
 8005124:	200001f0 	.word	0x200001f0

08005128 <sbrk_aligned>:
 8005128:	b570      	push	{r4, r5, r6, lr}
 800512a:	4e0e      	ldr	r6, [pc, #56]	; (8005164 <sbrk_aligned+0x3c>)
 800512c:	460c      	mov	r4, r1
 800512e:	6831      	ldr	r1, [r6, #0]
 8005130:	4605      	mov	r5, r0
 8005132:	b911      	cbnz	r1, 800513a <sbrk_aligned+0x12>
 8005134:	f000 f8bc 	bl	80052b0 <_sbrk_r>
 8005138:	6030      	str	r0, [r6, #0]
 800513a:	4621      	mov	r1, r4
 800513c:	4628      	mov	r0, r5
 800513e:	f000 f8b7 	bl	80052b0 <_sbrk_r>
 8005142:	1c43      	adds	r3, r0, #1
 8005144:	d00a      	beq.n	800515c <sbrk_aligned+0x34>
 8005146:	1cc4      	adds	r4, r0, #3
 8005148:	f024 0403 	bic.w	r4, r4, #3
 800514c:	42a0      	cmp	r0, r4
 800514e:	d007      	beq.n	8005160 <sbrk_aligned+0x38>
 8005150:	1a21      	subs	r1, r4, r0
 8005152:	4628      	mov	r0, r5
 8005154:	f000 f8ac 	bl	80052b0 <_sbrk_r>
 8005158:	3001      	adds	r0, #1
 800515a:	d101      	bne.n	8005160 <sbrk_aligned+0x38>
 800515c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005160:	4620      	mov	r0, r4
 8005162:	bd70      	pop	{r4, r5, r6, pc}
 8005164:	200001f4 	.word	0x200001f4

08005168 <_malloc_r>:
 8005168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800516c:	1ccd      	adds	r5, r1, #3
 800516e:	f025 0503 	bic.w	r5, r5, #3
 8005172:	3508      	adds	r5, #8
 8005174:	2d0c      	cmp	r5, #12
 8005176:	bf38      	it	cc
 8005178:	250c      	movcc	r5, #12
 800517a:	2d00      	cmp	r5, #0
 800517c:	4607      	mov	r7, r0
 800517e:	db01      	blt.n	8005184 <_malloc_r+0x1c>
 8005180:	42a9      	cmp	r1, r5
 8005182:	d905      	bls.n	8005190 <_malloc_r+0x28>
 8005184:	230c      	movs	r3, #12
 8005186:	603b      	str	r3, [r7, #0]
 8005188:	2600      	movs	r6, #0
 800518a:	4630      	mov	r0, r6
 800518c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005190:	4e2e      	ldr	r6, [pc, #184]	; (800524c <_malloc_r+0xe4>)
 8005192:	f000 f89d 	bl	80052d0 <__malloc_lock>
 8005196:	6833      	ldr	r3, [r6, #0]
 8005198:	461c      	mov	r4, r3
 800519a:	bb34      	cbnz	r4, 80051ea <_malloc_r+0x82>
 800519c:	4629      	mov	r1, r5
 800519e:	4638      	mov	r0, r7
 80051a0:	f7ff ffc2 	bl	8005128 <sbrk_aligned>
 80051a4:	1c43      	adds	r3, r0, #1
 80051a6:	4604      	mov	r4, r0
 80051a8:	d14d      	bne.n	8005246 <_malloc_r+0xde>
 80051aa:	6834      	ldr	r4, [r6, #0]
 80051ac:	4626      	mov	r6, r4
 80051ae:	2e00      	cmp	r6, #0
 80051b0:	d140      	bne.n	8005234 <_malloc_r+0xcc>
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	4631      	mov	r1, r6
 80051b6:	4638      	mov	r0, r7
 80051b8:	eb04 0803 	add.w	r8, r4, r3
 80051bc:	f000 f878 	bl	80052b0 <_sbrk_r>
 80051c0:	4580      	cmp	r8, r0
 80051c2:	d13a      	bne.n	800523a <_malloc_r+0xd2>
 80051c4:	6821      	ldr	r1, [r4, #0]
 80051c6:	3503      	adds	r5, #3
 80051c8:	1a6d      	subs	r5, r5, r1
 80051ca:	f025 0503 	bic.w	r5, r5, #3
 80051ce:	3508      	adds	r5, #8
 80051d0:	2d0c      	cmp	r5, #12
 80051d2:	bf38      	it	cc
 80051d4:	250c      	movcc	r5, #12
 80051d6:	4629      	mov	r1, r5
 80051d8:	4638      	mov	r0, r7
 80051da:	f7ff ffa5 	bl	8005128 <sbrk_aligned>
 80051de:	3001      	adds	r0, #1
 80051e0:	d02b      	beq.n	800523a <_malloc_r+0xd2>
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	442b      	add	r3, r5
 80051e6:	6023      	str	r3, [r4, #0]
 80051e8:	e00e      	b.n	8005208 <_malloc_r+0xa0>
 80051ea:	6822      	ldr	r2, [r4, #0]
 80051ec:	1b52      	subs	r2, r2, r5
 80051ee:	d41e      	bmi.n	800522e <_malloc_r+0xc6>
 80051f0:	2a0b      	cmp	r2, #11
 80051f2:	d916      	bls.n	8005222 <_malloc_r+0xba>
 80051f4:	1961      	adds	r1, r4, r5
 80051f6:	42a3      	cmp	r3, r4
 80051f8:	6025      	str	r5, [r4, #0]
 80051fa:	bf18      	it	ne
 80051fc:	6059      	strne	r1, [r3, #4]
 80051fe:	6863      	ldr	r3, [r4, #4]
 8005200:	bf08      	it	eq
 8005202:	6031      	streq	r1, [r6, #0]
 8005204:	5162      	str	r2, [r4, r5]
 8005206:	604b      	str	r3, [r1, #4]
 8005208:	4638      	mov	r0, r7
 800520a:	f104 060b 	add.w	r6, r4, #11
 800520e:	f000 f865 	bl	80052dc <__malloc_unlock>
 8005212:	f026 0607 	bic.w	r6, r6, #7
 8005216:	1d23      	adds	r3, r4, #4
 8005218:	1af2      	subs	r2, r6, r3
 800521a:	d0b6      	beq.n	800518a <_malloc_r+0x22>
 800521c:	1b9b      	subs	r3, r3, r6
 800521e:	50a3      	str	r3, [r4, r2]
 8005220:	e7b3      	b.n	800518a <_malloc_r+0x22>
 8005222:	6862      	ldr	r2, [r4, #4]
 8005224:	42a3      	cmp	r3, r4
 8005226:	bf0c      	ite	eq
 8005228:	6032      	streq	r2, [r6, #0]
 800522a:	605a      	strne	r2, [r3, #4]
 800522c:	e7ec      	b.n	8005208 <_malloc_r+0xa0>
 800522e:	4623      	mov	r3, r4
 8005230:	6864      	ldr	r4, [r4, #4]
 8005232:	e7b2      	b.n	800519a <_malloc_r+0x32>
 8005234:	4634      	mov	r4, r6
 8005236:	6876      	ldr	r6, [r6, #4]
 8005238:	e7b9      	b.n	80051ae <_malloc_r+0x46>
 800523a:	230c      	movs	r3, #12
 800523c:	603b      	str	r3, [r7, #0]
 800523e:	4638      	mov	r0, r7
 8005240:	f000 f84c 	bl	80052dc <__malloc_unlock>
 8005244:	e7a1      	b.n	800518a <_malloc_r+0x22>
 8005246:	6025      	str	r5, [r4, #0]
 8005248:	e7de      	b.n	8005208 <_malloc_r+0xa0>
 800524a:	bf00      	nop
 800524c:	200001f0 	.word	0x200001f0

08005250 <_realloc_r>:
 8005250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005254:	4680      	mov	r8, r0
 8005256:	4614      	mov	r4, r2
 8005258:	460e      	mov	r6, r1
 800525a:	b921      	cbnz	r1, 8005266 <_realloc_r+0x16>
 800525c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005260:	4611      	mov	r1, r2
 8005262:	f7ff bf81 	b.w	8005168 <_malloc_r>
 8005266:	b92a      	cbnz	r2, 8005274 <_realloc_r+0x24>
 8005268:	f7ff ff12 	bl	8005090 <_free_r>
 800526c:	4625      	mov	r5, r4
 800526e:	4628      	mov	r0, r5
 8005270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005274:	f000 f838 	bl	80052e8 <_malloc_usable_size_r>
 8005278:	4284      	cmp	r4, r0
 800527a:	4607      	mov	r7, r0
 800527c:	d802      	bhi.n	8005284 <_realloc_r+0x34>
 800527e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005282:	d812      	bhi.n	80052aa <_realloc_r+0x5a>
 8005284:	4621      	mov	r1, r4
 8005286:	4640      	mov	r0, r8
 8005288:	f7ff ff6e 	bl	8005168 <_malloc_r>
 800528c:	4605      	mov	r5, r0
 800528e:	2800      	cmp	r0, #0
 8005290:	d0ed      	beq.n	800526e <_realloc_r+0x1e>
 8005292:	42bc      	cmp	r4, r7
 8005294:	4622      	mov	r2, r4
 8005296:	4631      	mov	r1, r6
 8005298:	bf28      	it	cs
 800529a:	463a      	movcs	r2, r7
 800529c:	f7ff fed0 	bl	8005040 <memcpy>
 80052a0:	4631      	mov	r1, r6
 80052a2:	4640      	mov	r0, r8
 80052a4:	f7ff fef4 	bl	8005090 <_free_r>
 80052a8:	e7e1      	b.n	800526e <_realloc_r+0x1e>
 80052aa:	4635      	mov	r5, r6
 80052ac:	e7df      	b.n	800526e <_realloc_r+0x1e>
	...

080052b0 <_sbrk_r>:
 80052b0:	b538      	push	{r3, r4, r5, lr}
 80052b2:	4d06      	ldr	r5, [pc, #24]	; (80052cc <_sbrk_r+0x1c>)
 80052b4:	2300      	movs	r3, #0
 80052b6:	4604      	mov	r4, r0
 80052b8:	4608      	mov	r0, r1
 80052ba:	602b      	str	r3, [r5, #0]
 80052bc:	f7fc fa4a 	bl	8001754 <_sbrk>
 80052c0:	1c43      	adds	r3, r0, #1
 80052c2:	d102      	bne.n	80052ca <_sbrk_r+0x1a>
 80052c4:	682b      	ldr	r3, [r5, #0]
 80052c6:	b103      	cbz	r3, 80052ca <_sbrk_r+0x1a>
 80052c8:	6023      	str	r3, [r4, #0]
 80052ca:	bd38      	pop	{r3, r4, r5, pc}
 80052cc:	200001f8 	.word	0x200001f8

080052d0 <__malloc_lock>:
 80052d0:	4801      	ldr	r0, [pc, #4]	; (80052d8 <__malloc_lock+0x8>)
 80052d2:	f000 b811 	b.w	80052f8 <__retarget_lock_acquire_recursive>
 80052d6:	bf00      	nop
 80052d8:	200001fc 	.word	0x200001fc

080052dc <__malloc_unlock>:
 80052dc:	4801      	ldr	r0, [pc, #4]	; (80052e4 <__malloc_unlock+0x8>)
 80052de:	f000 b80c 	b.w	80052fa <__retarget_lock_release_recursive>
 80052e2:	bf00      	nop
 80052e4:	200001fc 	.word	0x200001fc

080052e8 <_malloc_usable_size_r>:
 80052e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052ec:	1f18      	subs	r0, r3, #4
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	bfbc      	itt	lt
 80052f2:	580b      	ldrlt	r3, [r1, r0]
 80052f4:	18c0      	addlt	r0, r0, r3
 80052f6:	4770      	bx	lr

080052f8 <__retarget_lock_acquire_recursive>:
 80052f8:	4770      	bx	lr

080052fa <__retarget_lock_release_recursive>:
 80052fa:	4770      	bx	lr

080052fc <_init>:
 80052fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fe:	bf00      	nop
 8005300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005302:	bc08      	pop	{r3}
 8005304:	469e      	mov	lr, r3
 8005306:	4770      	bx	lr

08005308 <_fini>:
 8005308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530a:	bf00      	nop
 800530c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800530e:	bc08      	pop	{r3}
 8005310:	469e      	mov	lr, r3
 8005312:	4770      	bx	lr
